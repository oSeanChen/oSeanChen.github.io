<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JPA, JDBC, Hibernate</title>
      <link href="/2024/02/16/JPA,%20JDBC,%20Hibernate/"/>
      <url>/2024/02/16/JPA,%20JDBC,%20Hibernate/</url>
      
        <content type="html"><![CDATA[<h2 id="JPA-Java-Persistance-API"><a href="#JPA-Java-Persistance-API" class="headerlink" title="JPA (Java Persistance API)"></a>JPA (Java Persistance API)</h2><ul><li><p>字面意思就是一個 Java 的持久化 API，將資料「儲存」與「讀取」的過程，就稱為「持久化」也可以說是將資料儲存到資料庫的過程。</p></li><li><p>JPA 其實是一個 Java 標準，定義了一組用於 ORM 的 API。它提供了一個標準的方法，使 Java 開發者能夠透過標準的介面來執行 ORM 操作，而不受特定數據庫供應商或是 ORM 框架的限制。</p></li></ul><h2 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h2><ul><li>Hibernate 是一個開源的 ORM 框架，實現了 JPA 標準，是 Java 中最廣泛使用的 ORM 框架之一。</li></ul><h2 id="JDBC-Java-Database-Connectivity"><a href="#JDBC-Java-Database-Connectivity" class="headerlink" title="JDBC (Java Database Connectivity)"></a>JDBC (Java Database Connectivity)</h2><ul><li>JDBC 是透過 Java 來連接資料庫的一種技術。它提供了一組用於執行 SQL 查詢、更新和管理數據庫連接的 Java 介面。透過 JDBC，Java 可以與各種不同的數據庫系統進行通信。</li></ul><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>由 Spring 提供基於 JDBC 的模組，它提供了一個抽象層，用於簡化 JDBC 操作並處理資源管理。允許開發者使用簡單的 API 來執行 SQL 查詢、更新、刪除等操作，<strong>仍需使用原始的 SQL 語法進行資料庫操作</strong>。</li></ul><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><ul><li>Spring Data 項目中的一部分，它是對 Java Persistence API (JPA) 的實現，<strong>應用了 ORM 的概念，並操作 JAVA object 的方式來進行資料庫的操作</strong>，並且可以用於多種數據庫，而不僅僅是關聯式數據庫。</li></ul><hr><p><strong>參考資料:</strong></p><ol><li><p><a href="https://medium.com/learning-from-jhipster/13-%E7%94%9A%E9%BA%BC%E6%98%AF-jdbc-orm-jpa-orm%E6%A1%86%E6%9E%B6-hibernate-c762a8c5e112">甚麼是 JDBC、ORM、 JPA、ORM框架、Hibernate</a></p></li><li><p><a href="https://www.baeldung.com/learn-jpa-hibernate">Learn JPA &amp; Hibernate</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java Basic </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>編碼(encoding) vs 加解密 vs 雜湊(Hash)</title>
      <link href="/2023/08/23/%E7%B7%A8%E7%A2%BC-encoding-vs-%E5%8A%A0%E8%A7%A3%E5%AF%86-vs-%E9%9B%9C%E6%B9%8A-Hash/"/>
      <url>/2023/08/23/%E7%B7%A8%E7%A2%BC-encoding-vs-%E5%8A%A0%E8%A7%A3%E5%AF%86-vs-%E9%9B%9C%E6%B9%8A-Hash/</url>
      
        <content type="html"><![CDATA[<h2 id="編碼-Encoding"><a href="#編碼-Encoding" class="headerlink" title="編碼(Encoding)"></a>編碼(Encoding)</h2><p>將原本的資料經過運算轉換成另一組資料,如果要還原可透過反向解碼(decoding)<br><strong>ex: Base64, URl, UTF-8</strong></p><h2 id="加解密-Encrypt-and-Decrypt"><a href="#加解密-Encrypt-and-Decrypt" class="headerlink" title="加解密(Encrypt and Decrypt)"></a>加解密(Encrypt and Decrypt)</h2><p>將資料透過一個 <strong>Key</strong> 來做加密或解密轉換(和編碼最大的差別)<br>可以根據鑰匙是否相同分成<strong>對稱式</strong>與<strong>非對稱</strong></p><h4 id="對稱式加密-Symmetric-Encryption-DES-x2F-Triple-DES、AES"><a href="#對稱式加密-Symmetric-Encryption-DES-x2F-Triple-DES、AES" class="headerlink" title="對稱式加密 (Symmetric Encryption) (DES&#x2F;Triple DES、AES)"></a>對稱式加密 (Symmetric Encryption) (DES&#x2F;Triple DES、AES)</h4><p>鑰匙相同，加密及解密都共用</p><p><strong>- AES（Advanced Encryption Standard）</strong><br><strong>- DES（Data Encryption Standard）</strong><br><strong>- DES&#x2F;Triple</strong></p><p>AES 是目前被廣泛接受和使用的加密方式，因提供了更高的安全性和更快的加密速度。DES 和 DES&#x2F;Triple DES 由於安全性弱和性能較慢，通常不是首選。</p><h4 id="非對稱式加密-Asymmetric-Encryption-RSA-演算法"><a href="#非對稱式加密-Asymmetric-Encryption-RSA-演算法" class="headerlink" title="非對稱式加密 (Asymmetric Encryption) (RSA 演算法)"></a>非對稱式加密 (Asymmetric Encryption) (RSA 演算法)</h4><p>加密與解密方式為：<strong>公鑰加密，私鑰解密</strong></p><p><strong>ex: RSA、ECC</strong></p><h2 id="雜湊-Hash"><a href="#雜湊-Hash" class="headerlink" title="雜湊(Hash)"></a>雜湊(Hash)</h2><p>SHA256 Hash 幾個特點:</p><ul><li>不管資料量多大經過 SHA256 運算字串長度都是一樣的</li><li>運算完的資料大小一定是 256 bit</li><li>不可逆的算法</li><li>相同的值用 SHA 運算過後值都是一樣的</li><li>資料加密上可以做到防竄改，確認演算前的值要完全一樣，且不可逆</li></ul><p><strong>ex: SHA-256、MD5</strong></p><h2 id="表格總結"><a href="#表格總結" class="headerlink" title="表格總結"></a>表格總結</h2><table><thead><tr><th align="left"></th><th align="center">可逆</th><th align="center">運算後長度</th><th align="center">安全性</th><th>Key</th></tr></thead><tbody><tr><td align="left">雜湊演算</td><td align="center">不可</td><td align="center">一樣</td><td align="center">高</td><td>無</td></tr><tr><td align="left">編碼</td><td align="center">可</td><td align="center">不一樣</td><td align="center">不高</td><td>無</td></tr><tr><td align="left">加解密</td><td align="center">可</td><td align="center">不一樣</td><td align="center">高</td><td>有</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537">基礎密碼學(對稱式與非對稱式加密技術)</a></li><li><a href="https://hackmd.io/@HuangPX/B1boJwRht?utm_source=preview-mode&utm_medium=rec">密碼學</a></li><li><a href="https://blog.darkthread.net/blog/store-pwd-safely/">密碼要怎麼儲存才安全？該加多少鹽？-科普角度</a></li><li><a href="https://hitcon.org/2018/CMT/slide-files/d1_s2_r4.pdf">應用密碼學入門</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 密碼學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 編碼 </tag>
            
            <tag> 加密 </tag>
            
            <tag> 雜湊演算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.equals() 和 == 差別</title>
      <link href="/2023/05/22/Java/equals-%E5%92%8C-%E5%B7%AE%E5%88%A5/"/>
      <url>/2023/05/22/Java/equals-%E5%92%8C-%E5%B7%AE%E5%88%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="“-x3D-x3D-”"><a href="#“-x3D-x3D-”" class="headerlink" title="“&#x3D;&#x3D;”"></a>“&#x3D;&#x3D;”</h2><ul><li>是用來判斷兩個比較物件是不是有相同的 references。</li><li>每一個物件都有獨立的 reference，假如 reference 不同就表示它們是不同的物件。</li></ul><h2 id="equals"><a href="#equals" class="headerlink" title=".equals()"></a>.equals()</h2><ul><li>是用來比較物件的值(儲存在 heap 上的值)。</li><li>可以判斷兩個有不同 references 的物件是否指向相同的值</li></ul><h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><ul><li>&#x3D;&#x3D; 比較的是兩個對象的引用或基本數據類型的值。</li><li>.equals() 比較的是兩個對象的內容，通常需要被覆寫，並根據自定義的邏輯進行比較。</li></ul><p>在使用時，需要注意以下幾點：</p><blockquote><ul><li>對於基本數據類型，應該使用 &#x3D;&#x3D; 來進行相等性比較。</li><li>對於引用類型，如果只是想比較兩個對象是否引用同一個 reference，可以使用 &#x3D;&#x3D;。如果需要比較兩個對象的內容的值是否相等，應該使用 .equals() 方法。</li><li>在使用 .equals() 方法時，需要注意處理 null 值的情況，以避免 NullPointerException。可以使用 Objects.equals() 方法（Java 7+）或自定義的邏輯來處理 null 值。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringUtils 常用判斷字串方法與 Java 內建方法比較</title>
      <link href="/2023/05/22/Java/StringUtils-%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%B7%E5%AD%97%E4%B8%B2%E6%96%B9%E6%B3%95%E8%88%87-Java-%E5%85%A7%E5%BB%BA%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83/"/>
      <url>/2023/05/22/Java/StringUtils-%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%B7%E5%AD%97%E4%B8%B2%E6%96%B9%E6%B3%95%E8%88%87-Java-%E5%85%A7%E5%BB%BA%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-內建方法"><a href="#Java-內建方法" class="headerlink" title="Java 內建方法"></a>Java 內建方法</h2><p>Java 本身提供幾個關於字串的判斷，會因為 null 產生 exception</p><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a><code>isEmpty()</code></h4><p>字串有長度(空白也算)就是 false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.isEmpty();     <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot; &quot;</span>.isEmpty();    <span class="comment">//false</span></span><br><span class="line"><span class="string">&quot;blank&quot;</span>.isEmpty();  <span class="comment">//false</span></span><br><span class="line"><span class="literal">null</span>.isEmpty(); <span class="comment">// NullPointerException</span></span><br></pre></td></tr></table></figure><h4 id="isBlank"><a href="#isBlank" class="headerlink" title="isBlank()"></a><code>isBlank()</code></h4><p>字串有長度沒文字還是 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;123&quot;</span>.isBlank();  <span class="comment">//false</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.isBlank();     <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot; &quot;</span>.isBlank();    <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span>.isBlank(); <span class="comment">// NullPointerException</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><p>StringUtils 用於處理 String 的，提供了比 Java String 多更多實用方法，且<strong>不會因為 null 而產生 exception</strong>。<br>屬於 Apache (org.apache.commons.lang.StringUtils) 的操作 String 類型數據常用工具套件</p><h4 id="StringUtils-isBlank"><a href="#StringUtils-isBlank" class="headerlink" title="StringUtils.isBlank()"></a><code>StringUtils.isBlank()</code></h4><ul><li>null [o]</li><li>空字串 [o]</li><li>空格 [o]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isBlank(<span class="literal">null</span>)     <span class="comment">// true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;&quot;</span>)       <span class="comment">// true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot; &quot;</span>)      <span class="comment">// true</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;blank&quot;</span>)     <span class="comment">// false</span></span><br><span class="line">StringUtils.isBlank(<span class="string">&quot;  blank  &quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="StringUtils-isNotBlank"><a href="#StringUtils-isNotBlank" class="headerlink" title="StringUtils.isNotBlank()"></a><code>StringUtils.isNotBlank()</code></h4><ul><li>null [x]</li><li>空字串 [x]</li><li>空格 [x]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isNotBlank(<span class="literal">null</span>);       <span class="comment">// false</span></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;&quot;</span>);         <span class="comment">// false</span></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot; &quot;</span>);        <span class="comment">// false</span></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;not blank&quot;</span>); <span class="comment">// true</span></span><br><span class="line">StringUtils.isNotBlank(<span class="string">&quot;  hello  &quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="StringUtils-isEmpty"><a href="#StringUtils-isEmpty" class="headerlink" title="StringUtils.isEmpty()"></a><code>StringUtils.isEmpty()</code></h4><p>有 length 就不是 empty</p><ul><li>null [o]</li><li>空字串 [o]</li><li>空格 [x] 有 length</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isEmpty(<span class="literal">null</span>)      <span class="comment">// true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;&quot;</span>)        <span class="comment">// true</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot; &quot;</span>)       <span class="comment">// false</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;Empty&quot;</span>)     <span class="comment">// false</span></span><br><span class="line">StringUtils.isEmpty(<span class="string">&quot;  Empty  &quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><blockquote><p>兩者判斷方式相同，但一些資料的流動難免會有可能讀寫上產生 null 所以 StringUtils 可以藉此不會因為 NullPointerException ，比較建議作為資料驗證判斷使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring restTemplate 使用方法</title>
      <link href="/2023/05/10/SpringBoot/Spring-restTemplate-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/10/SpringBoot/Spring-restTemplate-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-restTemplate-使用方法"><a href="#Spring-restTemplate-使用方法" class="headerlink" title="Spring restTemplate 使用方法"></a>Spring restTemplate 使用方法</h1><div class="note simple"><p>Spring Boot 常用來進行 api 請求的方法，通常可以用 restTemplate 這個物件來輕鬆實踐，也可以使用 Java 原生的 HttpConnectionUrl，後續有機會可以也介紹這部分，今天就先說明實務上比較常用到的幾個常見 restTemplate 方法。</p></div><h2 id="getForObject-x2F-postForObject"><a href="#getForObject-x2F-postForObject" class="headerlink" title="getForObject()&#x2F;postForObject()"></a>getForObject()&#x2F;postForObject()</h2><p>只想取得回覆的 body，對於其他 header 等資訊不在意</p><p>response output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="getForEntity-x2F-postForEntity"><a href="#getForEntity-x2F-postForEntity" class="headerlink" title="getForEntity()&#x2F;postForEntity()"></a>getForEntity()&#x2F;postForEntity()</h2><p>同時需要其他資訊如 header, response code 等等，其返回值是 ResponseEntity 物件，ResponseEntity 是 Spring 對 HTTP 請求的回覆封裝，getForObject 請求內部物件方法，getForEntity 都可以使用。</p><p>使用<code>ResponseEntity&lt;T&gt; responseEntity</code>來接收回覆結果。用<code>responseEntity.getBody()</code>獲取回復內容。</p><p>也可以透過方法多取得以下內容:</p><ul><li>statusCode</li><li>statusCodeValue</li></ul><p>response output:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">200</span> OK OK<span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">[</span>Date<span class="punctuation">:</span><span class="string">&quot;Fri, 05 May 2023 04:25:18 GMT&quot;</span><span class="punctuation">,</span> Content-Type<span class="punctuation">:</span><span class="string">&quot;application/json; charset=utf-8&quot;</span><span class="punctuation">,</span> Content-Length<span class="punctuation">:</span><span class="string">&quot;292&quot;</span><span class="punctuation">,</span> Connection<span class="punctuation">:</span><span class="string">&quot;keep-alive&quot;</span><span class="punctuation">,</span> X-Powered-By<span class="punctuation">:</span><span class="string">&quot;Express&quot;</span><span class="punctuation">,</span> X-Ratelimit-Limit<span class="punctuation">:</span><span class="string">&quot;1000&quot;</span><span class="punctuation">,</span> X-Ratelimit-Remaining<span class="punctuation">:</span><span class="string">&quot;999&quot;</span><span class="punctuation">,</span> X-Ratelimit-Reset<span class="punctuation">:</span><span class="string">&quot;1680935211&quot;</span><span class="punctuation">,</span> Vary<span class="punctuation">:</span><span class="string">&quot;Origin, Accept-Encoding&quot;</span><span class="punctuation">,</span> Access-Control-Allow-Credentials<span class="punctuation">:</span><span class="string">&quot;true&quot;</span><span class="punctuation">,</span> Cache-Control<span class="punctuation">:</span><span class="string">&quot;max-age=43200&quot;</span><span class="punctuation">,</span> Pragma<span class="punctuation">:</span><span class="string">&quot;no-cache&quot;</span><span class="punctuation">,</span> Expires<span class="punctuation">:</span><span class="string">&quot;-1&quot;</span><span class="punctuation">,</span> X-Content-Type-Options<span class="punctuation">:</span><span class="string">&quot;nosniff&quot;</span><span class="punctuation">,</span> Etag<span class="punctuation">:</span><span class="string">&quot;W/&quot;</span><span class="number">124</span>-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU<span class="string">&quot;&quot;</span><span class="punctuation">,</span> Via<span class="punctuation">:</span><span class="string">&quot;1.1 vegur&quot;</span><span class="punctuation">,</span> CF-Cache-Status<span class="punctuation">:</span><span class="string">&quot;HIT&quot;</span><span class="punctuation">,</span> Age<span class="punctuation">:</span><span class="string">&quot;978&quot;</span><span class="punctuation">,</span> Accept-Ranges<span class="punctuation">:</span><span class="string">&quot;bytes&quot;</span><span class="punctuation">,</span> Report-To<span class="punctuation">:</span><span class="string">&quot;&#123;&quot;</span>endpoints<span class="string">&quot;:[&#123;&quot;</span>url<span class="string">&quot;:&quot;</span>https<span class="punctuation">:</span>\/\/a.nel.cloudflare.com\/report\/v3?s=zbZjWeqC1UOOhIQz2Wre2PfoJwnvjfSy7EB7MeziF2rUrjahQTXAPavf70Jn0NUXj%<span class="number">2</span>B3NMYL3t2GjG5fvEhghNuyy%<span class="number">2</span>BADKVS7RiogM3YKd8d8R1ub%<span class="number">2</span>BjE13s%<span class="number">2</span>FLnXegsxErrU9WHNmMyRtj23t7Y4JGN<span class="string">&quot;&#125;],&quot;</span>group<span class="string">&quot;:&quot;</span>cf-nel<span class="string">&quot;,&quot;</span>max_age<span class="string">&quot;:604800&#125;&quot;</span><span class="punctuation">,</span> NEL<span class="punctuation">:</span><span class="string">&quot;&#123;&quot;</span>success_fraction<span class="string">&quot;:0,&quot;</span>report_to<span class="string">&quot;:&quot;</span>cf-nel<span class="string">&quot;,&quot;</span>max_age<span class="string">&quot;:604800&#125;&quot;</span><span class="punctuation">,</span> Server<span class="punctuation">:</span><span class="string">&quot;cloudflare&quot;</span><span class="punctuation">,</span> CF-RAY<span class="punctuation">:</span><span class="string">&quot;7c2638047d100911-LAX&quot;</span><span class="punctuation">,</span> alt-svc<span class="punctuation">:</span><span class="attr">&quot;h3=&quot;</span><span class="punctuation">:</span><span class="number">443</span><span class="attr">&quot;; ma=86400, h3-29=&quot;</span><span class="punctuation">:</span><span class="number">443</span><span class="string">&quot;; ma=86400&quot;</span><span class="punctuation">]</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h2><p>給定的 URI 執行 HTTP 方法，將給定的請求實體寫入請求，並將回應返回為 ResponseEntity.</p><h2 id="示範-使用-api-測試網站-https-jsonplaceholder-typicode-com"><a href="#示範-使用-api-測試網站-https-jsonplaceholder-typicode-com" class="headerlink" title="示範 (使用 api 測試網站 https://jsonplaceholder.typicode.com/)"></a>示範 (使用 api 測試網站 <a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a>)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApiWithRestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">urlForGet</span> <span class="operator">=</span> <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">UrlForPost</span> <span class="operator">=</span> <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        getForObject();</span><br><span class="line">        getForEntity();</span><br><span class="line">        exchangeWithGet();</span><br><span class="line">        exchangeWithPost();</span><br><span class="line">        postForEntity();</span><br><span class="line">        put();</span><br><span class="line">        delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getForObject</span></span><br><span class="line"><span class="comment">     * GET</span></span><br><span class="line"><span class="comment">     * response 只有回傳 api 回應內容，不帶有 header, response code...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getForObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> restTemplate.getForObject(urlForGet, String.class);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getForEntity</span></span><br><span class="line"><span class="comment">     * GET</span></span><br><span class="line"><span class="comment">     * response 組成 ResponseEntity ，內含 body, header, response code...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseEntity&lt;String&gt; <span class="title function_">getForEntity</span><span class="params">()</span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(urlForGet, String.class);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * exchange</span></span><br><span class="line"><span class="comment">     * (GET) 適用任何 http method。</span></span><br><span class="line"><span class="comment">     * 設定 header, body 等至 HttpEntity ， 回傳 response 為 ResponseEntity，內含 body, header, response code...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">exchangeWithGet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 設定 header</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立 HttpEntity 物件，包含請求頭及請求內容（可以省略）</span></span><br><span class="line">        HttpEntity&lt;String&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(<span class="string">&quot;&quot;</span>, headers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行 GET 請求，並取得回應資料</span></span><br><span class="line">        ResponseEntity&lt;String&gt; response = restTemplate.exchange(urlForGet, HttpMethod.GET, request, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 讀取回應內容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.getBody();</span><br><span class="line">        System.out.println(responseBody);</span><br><span class="line">        <span class="keyword">return</span> responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * exchange</span></span><br><span class="line"><span class="comment">     * (POST) 適用任何 http method。</span></span><br><span class="line"><span class="comment">     * 設定 header, body 等至 HttpEntity ， 回傳 response 為 ResponseEntity，內含 body, header, response code...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">exchangeWithPost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 設定 header</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"></span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立 HttpEntity 物件，包含請求頭及請求內容（可以省略）</span></span><br><span class="line">        <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>(<span class="string">&quot;新的文章標題&quot;</span>, <span class="string">&quot;大家好，我是Sean!!&quot;</span>);</span><br><span class="line">        HttpEntity&lt;Post&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(post, headers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行 GET 請求，並取得回應資料</span></span><br><span class="line">        ResponseEntity&lt;String&gt; response = restTemplate.exchange(UrlForPost, HttpMethod.POST, request, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 讀取回應內容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.getBody();</span><br><span class="line">        System.out.println(responseBody);</span><br><span class="line">        <span class="keyword">return</span> responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * postForEntity</span></span><br><span class="line"><span class="comment">     * POST</span></span><br><span class="line"><span class="comment">     * 設定 header, body 等至 HttpEntity ， 回傳 response 為 ResponseEntity，內含 body, header, response code...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseEntity&lt;Post&gt; <span class="title function_">postForEntity</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; mapPost = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapPost.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;新的文章標題&quot;</span>);</span><br><span class="line">        mapPost.put(<span class="string">&quot;body&quot;</span>, <span class="string">&quot;大家好，我是Sean!!&quot;</span>);</span><br><span class="line">        ResponseEntity&lt;Post&gt; response = restTemplate.postForEntity(UrlForPost, mapPost, Post.class);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * put</span></span><br><span class="line"><span class="comment">     * PUT</span></span><br><span class="line"><span class="comment">     * 沒有回傳值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/2&quot;</span>;</span><br><span class="line">        <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Post</span>(<span class="string">&quot;修改文章標題&quot;</span>, <span class="string">&quot;修改文章內容&quot;</span>);</span><br><span class="line">        restTemplate.put(url, post);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete</span></span><br><span class="line"><span class="comment">     * DELETE</span></span><br><span class="line"><span class="comment">     * 沒有回傳值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/3&quot;</span>;</span><br><span class="line">        restTemplate.delete(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>參考資料:</p><p><a href="https://liuyueyi.github.io/hexblog/2018/08/13/180813-Spring%E4%B9%8BRestTemplate%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93%E4%B8%80/">https://liuyueyi.github.io/hexblog/2018/08/13/180813-Spring%E4%B9%8BRestTemplate%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93%E4%B8%80/</a><br><a href="https://blog.csdn.net/YCJ_xiyang/article/details/90481832">https://blog.csdn.net/YCJ_xiyang/article/details/90481832</a><br><a href="https://zendei.com/article/96878.html">https://zendei.com/article/96878.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> http request </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA main()</title>
      <link href="/2023/05/03/Java/JAVA-main/"/>
      <url>/2023/05/03/Java/JAVA-main/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-main"><a href="#Java-main" class="headerlink" title="Java main()"></a>Java main()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一個類別只有一個 main 方法並且是整個程式的執行進入點（Entry point）。</li><li>封裝等級必須宣告為 public，且只有主類別可以宣告為 public。（預設為 public，所以 public 可省略）</li><li>主類別名稱必須與主檔名相同（不含副檔名）。</li><li>修飾字的宣告只能宣告為 abstract、final 或省略不寫。</li><li>public static void 是固定不可以改變的</li></ul><h2 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h2><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>表示方法是公開，可以在這個 class 以外的地方使用</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>表示靜態，是描述這個方法的狀態，程式剛開始執行前，就要把這些東西載入到記憶體，main() 方法不需要產生物件（Object）就能被執行，所以它必須是個 “static” 成員</p><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p>表示這個方法沒有回傳值，一但 main()方法終止，java 程序也將終止。因此，從 main()方法返回沒有任何意義。</p><h4 id="main-String-args"><a href="#main-String-args" class="headerlink" title="main (String[] args)"></a>main (String[] args)</h4><p>為 java jvm 找尋程式執行的進入點辨識的方法，參數可以接受字串陣列當做參數，這是 JVM 定義好的，String[] 表示字串陣列，args 是為這些字串陣列取的變數名稱，當然也可以寫 main（String[] abc）。<br>args：arguments</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://www.geeksforgeeks.org/java-main-method-public-static-void-main-string-args/">https://www.geeksforgeeks.org/java-main-method-public-static-void-main-string-args/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA Static</title>
      <link href="/2023/04/29/Java/JAVA-Static/"/>
      <url>/2023/04/29/Java/JAVA-Static/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-Static"><a href="#JAVA-Static" class="headerlink" title="JAVA Static"></a>JAVA Static</h1><h2 id="static-靜態"><a href="#static-靜態" class="headerlink" title="static 靜態"></a>static 靜態</h2><h4 id="作用對象"><a href="#作用對象" class="headerlink" title="作用對象"></a>作用對象</h4><p>可用來修飾 (類別的屬性、方法或子類別)，不能用 static 修飾最上層 Class</p><h4 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h4><p>靜態的意思是，在程式載入記憶體的時候，跟著程式一起在記憶體中佔有空間，而不是主程式開始執行後才跟記憶體要空間。</p><p>static 可以想像成<code>程式執行時已經載入到記憶體中</code>，有點類似於全域的概念，Java 中沒有全域性變數的概念。但可以透過 static 實現此目的，可以將變數宣告為靜態並將其用作全域性變數。</p><h4 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h4><p>如果物件內定義 static 屬性，就可以使用類名稱訪問靜態變數，不需要建立一個物件來呼叫靜態變數。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">static</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTesting</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student.id = <span class="number">1</span>;</span><br><span class="line">        Student.name = <span class="string">&quot;Sean&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">StudentId</span> <span class="operator">=</span> Student.id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">StudentName</span> <span class="operator">=</span> Student.name;</span><br><span class="line">        System.out.println(<span class="string">&quot;Id: &quot;</span>+StudentId);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span>+StudentName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Id: 1</span><br><span class="line">Name: Sean</span><br></pre></td></tr></table></figure><h4 id="範例-2"><a href="#範例-2" class="headerlink" title="範例 2"></a>範例 2</h4><p>static 也可以同時用在類別方法中，可以讓有被注入這個類別的程式內都可以使用，類似於使得類別內的變數擁有全域的特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalVarTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String Global;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setGlobal</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Global = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getGlobal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Global;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pubic <span class="keyword">class</span> <span class="title class_">TestGlobal1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        Global.setGlobal(a)</span><br><span class="line">        System.out.println(<span class="string">&quot;TestGlobal1 set Global: &quot;</span> + GlobalVarTest.getGlobal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubic <span class="keyword">class</span> <span class="title class_">TestGlobal2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        Global.setGlobal(b)</span><br><span class="line">        System.out.println(<span class="string">&quot;TestGlobal2 set Global: &quot;</span> + GlobalVarTest.getGlobal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestGlobal1 set Global: hi</span><br><span class="line">TestGlobal2 set Global: 123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 介紹</title>
      <link href="/2023/04/21/RabbitMQ-%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/04/21/RabbitMQ-%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="軟體簡介"><a href="#軟體簡介" class="headerlink" title="軟體簡介"></a>軟體簡介</h2><ul><li>著名應用 message Queue (message brokers) 的開源軟體</li><li>支持 AMQP 0-9-1 等多種訊息傳遞協定</li><li>支援多種語言及插件工具</li><li>圖形化介面管理及監控訊息狀態</li><li>其他類似軟體 EX: Kafka、AWS SQS…</li></ul><h2 id="AMQP-基本架構及名詞解釋"><a href="#AMQP-基本架構及名詞解釋" class="headerlink" title="AMQP 基本架構及名詞解釋"></a>AMQP 基本架構及名詞解釋</h2><p><img src="https://i.imgur.com/vJlh8T5.png"><br>AMQP 0-9-1: AMQP (Advanced Message Queuing Protocol)是一種訊息傳遞的協定，具有各個角色實踐訊息傳遞的中間代理。</p><p>由 Producer 發佈訊息到 exchange，可以想像成郵局或郵箱。然後依照綁定的規則將訊息發到 Queue（Broker） 。然後 consumer 依照期間監聽（訂閱）的 Queue 將其中訊息取出。</p><ul><li><code>Producer</code> ： 發送訊息的程式</li><li><code>Queue</code>：儲存訊息等待接收的緩衝區域，具有 FIFO 特性（先進先出）</li><li><code>Consumer</code>：訊息接收的程式</li><li><code>Exchange</code>：決定將訊息推送至指定位置<ul><li>Direct：直接丟給指定的 Queue</li><li>Topic：設定 binding 規則，丟給符合的 Queue</li><li>Fanout：一次丟給全部負責的 Queue</li></ul></li></ul><h2 id="5-種-RabbitMQ-設計模式"><a href="#5-種-RabbitMQ-設計模式" class="headerlink" title="5 種 RabbitMQ 設計模式"></a>5 種 RabbitMQ 設計模式</h2><h3 id="1-Simple"><a href="#1-Simple" class="headerlink" title="1. Simple"></a>1. Simple</h3><p>最基本的模式，只有一個 Producer 負責送 message 給 Queue、只有一個 Consumer 去 Ｑ ueue 裡將 message 接收</p><p><img src="https://i.imgur.com/kphjY7p.png"></p><h3 id="2-Worker"><a href="#2-Worker" class="headerlink" title="2. Worker"></a>2. Worker</h3><p>這模式像是多個工人會共同去完成工作</p><p>同時有多個 Consumer 會去收 Queue 裡的 message，可以增加 message 消化的速率。常用的一種模式，通常是用在大量非同步的作業上，只要連接同一個 Queue，就可以在多台機器上 Consumer 平行處理。</p><p><img src="https://i.imgur.com/IsOedmp.png"></p><h3 id="3-Publish-x2F-Subscibe"><a href="#3-Publish-x2F-Subscibe" class="headerlink" title="3. Publish&#x2F;Subscibe"></a>3. Publish&#x2F;Subscibe</h3><p>可以想像成訂閱頻道或是服務一樣，有新的發表或是訊息就會廣播給訂閱者。</p><p>所以需在 Producer、Queue、Consumer 之間多一個 Exchange，Producer 會先把 message 丟給 Exchange （Type &#x3D; Fanout），Fanout 模式的 Exchange 去決定要把這個 message 丟給綁定（訂閱）的 Queue 上</p><p><img src="https://i.imgur.com/kWcOt87.png"></p><h3 id="4-Routing"><a href="#4-Routing" class="headerlink" title="4. Routing"></a>4. Routing</h3><p>想成貼上標籤（Routing key）並依照標籤指定類型來傳送</p><p>當 Producer 把 message 丟給 Exchange（Type &#x3D; Direct） 時，同時要在這個 message 上面帶上一個 routing key，而 Exchange 就會根據這個 routing key，將 message 丟到指定的 Queue 上</p><p>就像下圖的例子，Q1 只會收到關於 orange 相關 routing key 的 message、Q2 則是 black 及 green 的 message</p><p><img src="https://i.imgur.com/lPALPn7.png"></p><h3 id="5-Topics"><a href="#5-Topics" class="headerlink" title="5. Topics"></a>5. Topics</h3><p>也是標上特定標籤，可以想成能區分更仔細的多重標籤。</p><p>類似 Routing 模式，同樣有 Exchange (Type &#x3D; Topic)，也透過 routing key 來分流訊息，差別在 topic 的特性能夠模糊綁定非固定的 routing key。 設定模糊 routing key 的格式需以 .(dot) 分隔的字串，*(star) 只能代替一個單詞、#(bash) 可以代替零個或多個單詞。</p><p>根據下圖的狀況，訊息將使用由三個標籤組成的 routing key 發送，第一個標籤是 “速度”，第二個標籤是 “顏色”，第三個標籤是 “動物”：&lt;速度&gt;.&lt;顏色&gt;.&lt;動物&gt;。</p><p>Q1 以 .orange. 綁定，與 Q2 以 <em>.</em>.rabbit 和 lazy.# 綁定，也就是：</p><ul><li>Q1 會收到所有關於 “橘色動物” 的訊息</li><li>Q2 會收到所有關於 “兔子” 的訊息，以及所有關於 “任何顏色且懶惰動物” 的訊息</li></ul><p><img src="https://i.imgur.com/VkBc4i4.png"></p><hr><p>參考資料:</p><ol><li><a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">AMQP 0-9-1 Model Explained</a></li><li><a href="https://enzochang.com/rabbitmq-introduction/">RabbitMQ 簡介與 5 種設計模式</a></li><li><a href="https://kucw.github.io/blog/2020/11/rabbitmq/">RabbitMQ 基本介紹、安裝教學</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Message Queue </tag>
            
            <tag> Asynchronous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot http method 取得請求參數方法</title>
      <link href="/2023/03/25/SpringBoot/Spring-Boot-http-method-%E5%8F%96%E5%BE%97%E8%AB%8B%E6%B1%82%E5%8F%83%E6%95%B8%E6%96%B9%E6%B3%95/"/>
      <url>/2023/03/25/SpringBoot/Spring-Boot-http-method-%E5%8F%96%E5%BE%97%E8%AB%8B%E6%B1%82%E5%8F%83%E6%95%B8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>Spring Boot 常使用取得請求的方式：</p><ul><li>@RequestParam</li><li>@RequestBody</li><li>@RequestHeader</li><li>@PathVariable</li></ul></div><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>用法：</p><ul><li>GET</li><li>只能加在方法的參數(query parameter)上</li><li>required &#x3D; true&#x2F;false (預設 true)，如果是 false 就不用代入 但可能會因此有 null 報 exception</li><li>defaultValue &#x3D; xxx，可以預設值</li></ul><p>用途：取得放在 url 的參數</p><p><code>http:localhost:8080/test?id=123</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(<span class="meta">@RequestParam</span> Integer id,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam</span> (defaultValue = <span class="string">&quot;Sean&quot;</span>)</span> String name</span><br><span class="line">                        <span class="meta">@RequestParam</span> String <span class="title function_">nickname</span> <span class="params">(required = <span class="literal">false</span>)</span></span><br><span class="line">    )&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + nickname);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;your request id is &quot;</span> + id + <span class="string">&quot;and name is &quot;</span> + name + <span class="string">&quot;,or you can called me&quot;</span> + nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api request<br><img src="https://i.imgur.com/nEWhpMX.png"></p><p>console 上面顯示<br><img src="https://i.imgur.com/U0AvxlZ.png"></p><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>用法：</p><ul><li>POST</li><li>只能加在方法的參數上</li><li>需要先定義對應參數的 java class</li><li>requestbody 裡面多傳參數也不會報錯，有定義的才會被使用，少傳就會有 null</li></ul><p>用途：取得 Request body 裡面的參數（將 Json 轉為自定義 Java Object）</p><p><code>http:localhost:8080/test2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;student id: &quot;</span> + student.getId() );</span><br><span class="line">    System.out.println(<span class="string">&quot;student name: &quot;</span> + student.getName() );</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello test2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">    List&lt;String&gt; courseList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getCourseList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> courseList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourseList</span><span class="params">(List&lt;String&gt; courseList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courseList = courseList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>api request<br><img src="https://i.imgur.com/LB9SHzv.png"></p><p><img src="https://i.imgur.com/5otFdmB.png"></p><p>console 上面顯示<br><img src="https://i.imgur.com/avU1pAf.png"></p><h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>用法：</p><ul><li>GET&#x2F;POST</li><li>只能加在方法參數上</li><li>name(or value): 指定 request header 的 header 名字（比 requestparm 的 name 常用）</li><li>required &#x3D; true&#x2F;false 同 @RequestParam</li><li>defaultValue: 預設值 同 @RequestParam</li></ul><p>用途：取得放在 requestHeader 的參數，可以用 GET 請求中設定 header; 如果用 POST 一般都會帶入 Content-Type &#x3D; application&#x2F;json，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">(<span class="meta">@RequestHeader</span> String info,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestHeader</span> (name = <span class="string">&quot;gogo&quot;</span>, required = <span class="literal">false</span>)</span> String gogo)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;header info: &quot;</span> + info);</span><br><span class="line">    System.out.println(<span class="string">&quot;header gogo: &quot;</span> + gogo);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello test3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api request<br><img src="https://i.imgur.com/gqsy8e0.png"></p><p>console 上面顯示<br><img src="https://i.imgur.com/v2NLbfl.png"></p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>用法：</p><ul><li>只能加在方法的參數上</li><li>路徑上寫的參數要和 @PathVariable 定義的一樣<br>用途：取得放在 url 路徑裡面的值</li></ul><p><code>http://localhost:8080/test4/123/Sean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test4/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test4</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,</span></span><br><span class="line"><span class="params">                        <span class="meta">@PathVariable</span> String name</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;path id: &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;path name: &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello test4&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>api request<br><img src="https://i.imgur.com/mrKFW5z.png"></p><p>console 上面顯示<br><img src="https://i.imgur.com/5AIeMxn.png"></p><hr><p>參考資料：</p><ol><li>Java 工程師必備！Spring Boot 零基礎入門 （hahow 課程）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> http request </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 套件操作，Devise（google 第三方登入（下）)</title>
      <link href="/2022/11/02/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%EF%BC%88google-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2022/11/02/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%EF%BC%88google-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>今天接著安裝完成 <code>&#39;omniauth-google-oauth2&#39;</code>、<code>&#39;omniauth-rails_csrf_protection&#39;</code>這兩個套件之後，我們接續後面的步驟吧。</p><h3 id="設定-routes"><a href="#設定-routes" class="headerlink" title="設定 routes"></a>設定 routes</h3><p>記得之前用 devise 產生的 controller 中有一個 omniauth_callbacks_controller.rb 這個檔案嗎？<br>現在可以拿來用了喔，但我們要告訴 devise 要去使用這個 controller 必須要設定好 routes</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g <span class="symbol">devise:</span>controllers users</span><br></pre></td></tr></table></figure><p>如同前面章節有提到，這些產生的 controller 必須要設定好路徑才可以使用喔。如果沒有產生的話可以自己建立 app&#x2F;controller&#x2F;users&#x2F;omniauth_callbacks_controller.rb 到這個路徑。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devise_for <span class="symbol">:users</span>, <span class="symbol">controllers:</span> &#123; <span class="symbol">omniauth_callbacks:</span> <span class="string">&#x27;users/omniauth_callbacks&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="設定-callback-controller"><a href="#設定-callback-controller" class="headerlink" title="設定 callback controller"></a>設定 callback controller</h3><p>這邊是當 google 授權後會帶著得到那邊相關的資料來到我們的網域，就會用 callbacks controller 接下來這些資料，也就是前面填寫給 google 的 已授權的重新導向 url 位置。接下來之後我們要把這些資料拿來比對是否資料庫內已經有對應存在的帳號。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Users::OmniauthCallbacksController</span> &lt; <span class="title class_ inherited__">Devise::OmniauthCallbacksController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">google_oauth2</span></span><br><span class="line">      <span class="comment"># 需要在model中實作定義下面 `from_omniauth` 的方法 (app/models/user.rb)</span></span><br><span class="line">      <span class="variable">@user</span> = User.from_omniauth(request.env[<span class="string">&#x27;omniauth.auth&#x27;</span>])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="variable">@user</span>.persisted?</span><br><span class="line">        flash[<span class="symbol">:notice</span>] = I18n.t <span class="string">&#x27;devise.omniauth_callbacks.success&#x27;</span>, <span class="symbol">kind:</span> <span class="string">&#x27;Google&#x27;</span></span><br><span class="line">        sign_in_and_redirect <span class="variable">@user</span>, <span class="symbol">event:</span> <span class="symbol">:authentication</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        session[<span class="string">&#x27;devise.google_data&#x27;</span>] = request.env[<span class="string">&#x27;omniauth.auth&#x27;</span>].except(<span class="string">&#x27;extra&#x27;</span>)</span><br><span class="line">        redirect_to new_user_registration_url, <span class="symbol">alert:</span>   <span class="variable">@user</span>.errors.full_messages.join(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="設定-model"><a href="#設定-model" class="headerlink" title="設定 model"></a>設定 model</h3><p>先加入 devise 提供的 :omniauthable 的方法到 model 上面</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devise <span class="symbol">:database_authenticatable</span>, <span class="symbol">:registerable</span>,</span><br><span class="line">       <span class="symbol">:recoverable</span>, <span class="symbol">:rememberable</span>, <span class="symbol">:validatable</span>,</span><br><span class="line">       <span class="symbol">:omniauthable</span>, <span class="symbol">omniauth_providers:</span> [<span class="symbol">:google_oauth2</span>]</span><br></pre></td></tr></table></figure><p>前面在 callback controller 可以看到我們需要對 User 這個 model 定義類別方法 <code>from_omniauth</code> 在 user.rb 中，解析授權回來的資料，並且會從資料庫中比對跟授權回來的 email 資料相同的 user 來建立一個，注意註解下面的部分是處理當沒有對應的 email 或相關註冊填寫的資料時就建立給一個出來進行登入。</p><p>如果你定義 user 寫入資料庫的部分有要填入其他欄位或是只要特定的可以自己調整，預設只有 email 跟 password，像我當初專案是多加入 username，所以就改成下面這樣。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">self</span>.from_omniauth(access_token)</span><br><span class="line">    data = access_token.info</span><br><span class="line">    user = User.where(<span class="symbol">email:</span> data[<span class="string">&#x27;email&#x27;</span>]).first</span><br><span class="line">    <span class="comment"># 下面處理是當資料庫內部沒有對應的帳號密碼時，建立給我們專案資料庫去對應每次授權的 token。</span></span><br><span class="line">    user |<span class="params"></span>|= User.create(</span><br><span class="line">      (<span class="symbol">username:</span> data[<span class="string">&#x27;username&#x27;</span>] |<span class="params"></span>| data[<span class="string">&#x27;email&#x27;</span>].split(<span class="string">&#x27;@&#x27;</span>).first,</span><br><span class="line">       <span class="symbol">email:</span> data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">       <span class="symbol">password:</span> Devise.friendly_token[<span class="number">0</span>,<span class="number">20</span>]</span><br><span class="line">         )</span><br><span class="line">    user</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="最後可以回去看到-view-的部分"><a href="#最後可以回去看到-view-的部分" class="headerlink" title="最後可以回去看到 view 的部分"></a>最後可以回去看到 view 的部分</h3><p>如果你有用他產生預設的 view 應該會直接看到相關連結自動產生在頁面上，你也可以自己找出路徑客製自己藥的東西，可以透過下面找到相關路徑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails routes -c omniauth</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OBARANG.png"></p><p>填入對應的 link_to 位置應該就可以看到。就可以測試看看是否可以正常使用。</p><p>－－－<br>參考資料：</p><ol><li><a href="https://www.youtube.com/watch?v=XuXC8BvJM4Y&ab_channel=SupeRailsbyYaroslavShmarov">YarpslavShmarov 教學影片</a></li><li><a href="https://github.com/zquestz/omniauth-google-oauth2">omniauth-google-oauth2</a></li><li><a href="https://medium.com/tingyiiii/rails%E5%AF%A6%E4%BD%9C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5-google-2a0851b74193">Rails 實作第三方登入-Google</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails套件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> Devise </tag>
            
            <tag> 套件 </tag>
            
            <tag> 會員系統 </tag>
            
            <tag> google </tag>
            
            <tag> github </tag>
            
            <tag> Omniauth </tag>
            
            <tag> Oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 套件操作，Devise（google 第三方登入（上）)</title>
      <link href="/2022/10/31/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%EF%BC%88google-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2022/10/31/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%EF%BC%88google-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>相信很多人主要是希望可以透過 devise 來幫忙串接第三方登入，這部分剛好在我們製作專案的時候有順利完成 google 的部分就拿出來分享給大家。</p><h2 id="主要步驟"><a href="#主要步驟" class="headerlink" title="主要步驟"></a>主要步驟</h2><ol><li>申請 google api 金鑰</li><li>專案中 devise 設定檔設定金鑰</li><li>裝上 omniauth 套件配合串接 devise</li><li>設定 routes</li><li>設定 callback controller</li><li>設定 model</li></ol><p>這篇先針對前面三點進行說明。</p><h3 id="申請-google-oauth-金鑰"><a href="#申請-google-oauth-金鑰" class="headerlink" title="申請 google oauth 金鑰"></a>申請 google oauth 金鑰</h3><p>先到 google cloud 去申請 oauth 金鑰<br><a href="https://console.cloud.google.com/">https://console.cloud.google.com/</a></p><p>點選 oauth 用戶端 id 進入申請頁面<br><img src="https://i.imgur.com/jXKWzgx.png"></p><p>填寫的部分：</p><ul><li>應用程式類型選“網頁應用程式”</li><li>名稱就自己決定</li><li>已授權的 javascript 來源<br>先填上 localhost 的位置 (<a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a>) or (<a href="http://localhost:3000)，方便你本機可以進行測試，建議上面兩種都填寫，防止你開">http://localhost:3000)，方便你本機可以進行測試，建議上面兩種都填寫，防止你開</a> server 連到沒加入金鑰的那個位置，之後上線後記得也補上正式上線的網域。</li><li>已授權的重新導向 url<br>這邊需要填上 <code>網域/users/auth/google_oauth2/callback</code>，是當使用者從 google 授權完成後回到的地方。</li></ul><p><img src="https://i.imgur.com/aN1BVRn.png"><br>送出後會拿到金鑰 id 跟 secret<br>相關填寫可以參考下面這張圖，是申請完成後點入項目看到的畫面，紅色及藍色得匡線部分，紫色匡線內是金鑰，要拿去專案內設定使用。<br><img src="https://i.imgur.com/Cx4s1gm.png"></p><h3 id="devise-設定金鑰"><a href="#devise-設定金鑰" class="headerlink" title="devise 設定金鑰"></a>devise 設定金鑰</h3><p>devise.rb 檔案進行金鑰設定</p><p>建議配合套件 <a href="https://github.com/bkeepers/dotenv">dotenv</a>，把上面這些重要金鑰轉成環境變數存起來，並且記得 <code>.gitignore</code> 要把 <code>.env</code> 檔案加入避免上版本控制</p><p>加入下面的設定，後面 ENV[“OAUTH_GOOGLE_ID”], ENV[“OAUTH_GOOGLE_SECRET”] 是我的金鑰用戶端編號跟密碼</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.omniauth <span class="symbol">:google_oauth2</span>, <span class="variable constant_">ENV</span>[<span class="string">&quot;OAUTH_GOOGLE_ID&quot;</span>], <span class="variable constant_">ENV</span>[<span class="string">&quot;OAUTH_GOOGLE_SECRET&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="裝上-omniauth-相關套件"><a href="#裝上-omniauth-相關套件" class="headerlink" title="裝上 omniauth 相關套件"></a>裝上 omniauth 相關套件</h3><p><a href="https://github.com/zquestz/omniauth-google-oauth2">https://github.com/zquestz/omniauth-google-oauth2</a></p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">&#x27;omniauth-google-oauth2&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;omniauth-rails_csrf_protection&#x27;</span></span><br></pre></td></tr></table></figure><p>下一篇再繼續補上後面步驟的說明。</p><hr><p>參考資料：</p><ol><li><a href="https://www.youtube.com/watch?v=XuXC8BvJM4Y&ab_channel=SupeRailsbyYaroslavShmarov">YarpslavShmarov 教學影片</a></li><li><a href="https://github.com/zquestz/omniauth-google-oauth2">omniauth-google-oauth2</a></li><li><a href="https://medium.com/tingyiiii/rails%E5%AF%A6%E4%BD%9C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%85%A5-google-2a0851b74193">Rails 實作第三方登入-Google</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails套件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> Devise </tag>
            
            <tag> 套件 </tag>
            
            <tag> 會員系統 </tag>
            
            <tag> google </tag>
            
            <tag> github </tag>
            
            <tag> Omniauth </tag>
            
            <tag> Oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Model 關聯性 (N:N）</title>
      <link href="/2022/10/28/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-N-N%EF%BC%89/"/>
      <url>/2022/10/28/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-N-N%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="多對多-N-N"><a href="#多對多-N-N" class="headerlink" title="多對多 N:N"></a>多對多 N:N</h2><p>關於多對多繼續用飲料店的例子舉例說明，可以想像我們很多間飲料店品牌，有很多飲料品項是相同的或不同，就會有需要有一張第三方表單來記錄：</p><ul><li>一間飲料店可以有很多種飲料<ul><li>store has many drinks</li></ul></li><li>同一種飲料可以被很多間不同的飲料店販賣<ul><li>drink has many stores</li></ul></li></ul><p>我們可以透過這張表單來知道，哪間店有賣哪些飲料，哪些飲料有被哪些店家販售。<br>他們之間的關係可以透過下面這張圖片看到，虛線的 has many 表示他們並不是真的直接有一對多的關聯，而是需要透過第三方表格來建立多對多關聯。</p><p><img src="https://i.imgur.com/F08kpbv.png"></p><p>我們可以建立第三方的表格 drink_invest 來記錄飲料和店家之間的關係<br><code>rails g model drink_invest store:references drink:references</code></p><p>加上 <code>reference</code> 或是 <code>belongs_to</code> 都可以讓這個表格自動建立出對應的 store_id 及 drink_id 欄位，並且可以：</p><ul><li>自動加上索引（index），加快查詢</li><li>自動幫 Model 加上 belongs_to</li></ul><p>需要建立這樣的第三方表格來建立關聯，是屬於多對多的關聯<br>drink 和 store 之間沒有直接 has_many 的關聯， 但可以使用 has_many through 去透過 drink_invest 建立多對多的關聯。</p><p>接著可以把相關的 model 建立好關聯</p><p>store.rb</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:drink_invests</span></span><br><span class="line">  has_many <span class="symbol">:drinks</span>, <span class="symbol">through:</span> <span class="symbol">:drink_invests</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>drink.rb</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Drink</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:drink_invests</span></span><br><span class="line">  has_many <span class="symbol">:stores</span>, <span class="symbol">through:</span> <span class="symbol">:drink_invests</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="進入-rails-console-試試看"><a href="#進入-rails-console-試試看" class="headerlink" title="進入 rails console 試試看"></a>進入 rails console 試試看</h2><p>先建立好我們需要的資料，店家、飲料、還有店家販售的飲料有哪些。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = Store.create(<span class="symbol">name:</span><span class="string">&quot;五石蘭&quot;</span>, <span class="symbol">tel:</span><span class="string">&quot;031234567&quot;</span>, <span class="symbol">address:</span><span class="string">&quot;新竹縣&quot;</span>, <span class="symbol">owner_id:</span><span class="number">1</span>)</span><br><span class="line">s2 = Store.create(<span class="symbol">name:</span><span class="string">&quot;渴不渴&quot;</span>, <span class="symbol">tel:</span><span class="string">&quot;03323232&quot;</span>, <span class="symbol">address:</span><span class="string">&quot;台北市&quot;</span>, <span class="symbol">owner_id:</span><span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = Drink.create(<span class="symbol">name:</span> <span class="string">&quot;紅茶&quot;</span>, <span class="symbol">price:</span> <span class="number">30</span>)</span><br><span class="line">d2 = Drink.create(<span class="symbol">name:</span> <span class="string">&quot;綠茶&quot;</span>, <span class="symbol">price:</span> <span class="number">30</span>)</span><br><span class="line">d3 = Drink.create(<span class="symbol">name:</span> <span class="string">&quot;珍珠奶茶&quot;</span>, <span class="symbol">price:</span> <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 五石蘭 有賣 紅茶跟綠茶</span></span><br><span class="line">s1.drinks = [d1, d2]</span><br><span class="line"><span class="comment"># 渴不渴 有賣 綠茶跟珍珠奶茶</span></span><br><span class="line">s2.drinks = [d2, d3]</span><br></pre></td></tr></table></figure><p>查詢相關的資訊之後會注意到 sql 語法的變化，開始透過第三方表格進行查詢。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 有販售 d1 綠茶有幾家</span><br><span class="line">d1.stores.<span class="built_in">count</span></span><br><span class="line">   (<span class="number">0.6</span>ms)  <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> &quot;stores&quot; <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &quot;drink_invests&quot; <span class="keyword">ON</span> &quot;stores&quot;.&quot;id&quot; <span class="operator">=</span> &quot;drink_invests&quot;.&quot;store_id&quot; <span class="keyword">WHERE</span> &quot;drink_invests&quot;.&quot;drink_id&quot; <span class="operator">=</span> ?  [[&quot;drink_id&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 有販售 d2 紅茶有幾家</span><br><span class="line">d2.stores.<span class="built_in">count</span></span><br><span class="line">   (<span class="number">0.5</span>ms)  <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> &quot;stores&quot; <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &quot;drink_invests&quot; <span class="keyword">ON</span> &quot;stores&quot;.&quot;id&quot; <span class="operator">=</span> &quot;drink_invests&quot;.&quot;store_id&quot; <span class="keyword">WHERE</span> &quot;drink_invests&quot;.&quot;drink_id&quot; <span class="operator">=</span> ?  [[&quot;drink_id&quot;, <span class="number">2</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> # 有販售 d3 奶茶有幾家</span><br><span class="line"> d3.stores.<span class="built_in">count</span></span><br><span class="line">   (<span class="number">0.4</span>ms)  <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> &quot;stores&quot; <span class="keyword">INNER</span> <span class="keyword">JOIN</span> &quot;drink_invests&quot; <span class="keyword">ON</span> &quot;stores&quot;.&quot;id&quot; <span class="operator">=</span> &quot;drink_invests&quot;.&quot;store_id&quot; <span class="keyword">WHERE</span> &quot;drink_invests&quot;.&quot;drink_id&quot; <span class="operator">=</span> ?  [[&quot;drink_id&quot;, <span class="number">3</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以發現，這些查詢的 SQL 語法中，都已經不是直接跟 Store 或 Drink 要資料，而是向 drink_invest 進行查詢。例如第二項查詢在 s1 跟 s2 都有 d2 這個商品，所以是 2 家。</p><p>「多對多」關連，在使用上就跟一般的「一對多」很像，但實際上的資訊都是記錄在第三方資料表裡。</p><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/18-model-relationship">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Model 關聯性 (1:N)</title>
      <link href="/2022/10/27/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-1-N/"/>
      <url>/2022/10/27/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-1-N/</url>
      
        <content type="html"><![CDATA[<h2 id="1-N-一對多"><a href="#1-N-一對多" class="headerlink" title="1:N 一對多"></a>1:N 一對多</h2><p>如果我們希望每間商店可以販售許多種飲料，可以使用一對多模式來進行關連。</p><p>先建立 Drink 這個 Model：<br><code>rails g model Drink name price:decimal store_id:integer</code></p><p>目前的資料關聯設計像下圖<br><img src="https://i.imgur.com/24StW2e.png"></p><p>先把 model 之間的關聯建立好</p><p>drink.rb</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Drink</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:stores</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>store.rb</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:drinks</span></span><br><span class="line">  belongs_to <span class="symbol">:owner</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="方法建立"><a href="#方法建立" class="headerlink" title="方法建立"></a>方法建立</h3><p>跟 has_one 一樣，設定 has_many :drinks 後會多了以下幾個方法，belongs_to 建立的方法跟 1:1 是一樣，這邊就不多提：</p><blockquote><p>drinks<br>drinks&#x3D;<br>build<br>create</p></blockquote><h3 id="console-測試看看"><a href="#console-測試看看" class="headerlink" title="console 測試看看"></a>console 測試看看</h3><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找回上次建立的飲料店</span></span><br><span class="line">s1 = Store.last</span><br><span class="line"></span><br><span class="line"><span class="symbol">id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;五石蘭&quot;</span>,</span><br><span class="line"><span class="symbol">tel:</span> <span class="string">&quot;031234567&quot;</span>,</span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;新竹縣&quot;</span>,</span><br><span class="line"><span class="symbol">owner_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接用 Drink 建立好再丟給 store</span></span><br><span class="line">d1 = <span class="title class_">Drink</span>.new(<span class="symbol">name:</span><span class="string">&quot;紅茶&quot;</span>, <span class="symbol">price:</span><span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;紅茶&quot;</span>,</span><br><span class="line"><span class="symbol">price:</span> <span class="number">0.6e2</span>,</span><br><span class="line"><span class="symbol">store_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">50.417919000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">50.417919000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;,</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 把 d1 放到陣列中指定給 s1.drinks</span></span><br><span class="line">s1.drinks = [d1]</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 把 d1 插入到 s1.drinks 陣列</span></span><br><span class="line">s1.drinks &lt;&lt; d1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透過 store 去建立 drink</span></span><br><span class="line">s1.drinks.create(<span class="symbol">name:</span><span class="string">&quot;珍珠奶茶&quot;</span>, <span class="symbol">price:</span><span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">id:</span> <span class="number">2</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;珍珠奶茶&quot;</span>,</span><br><span class="line"><span class="symbol">price:</span> <span class="number">0.6e2</span>,</span><br><span class="line"><span class="symbol">store_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;]</span><br></pre></td></tr></table></figure><p>查出所有 s1 的飲料</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1.drinks</span><br><span class="line"></span><br><span class="line"><span class="symbol">id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;紅茶&quot;</span>,</span><br><span class="line"><span class="symbol">price:</span> <span class="number">0.3e2</span>,</span><br><span class="line"><span class="symbol">store_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">50.417919000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">50.417919000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;,</span><br><span class="line"><span class="symbol">id:</span> <span class="number">2</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;珍珠奶茶&quot;</span>,</span><br><span class="line"><span class="symbol">price:</span> <span class="number">0.6e2</span>,</span><br><span class="line"><span class="symbol">store_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;]</span><br></pre></td></tr></table></figure><p>也可以反查出某款飲料是哪間店</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找回最後建立的飲料(珍珠奶茶)</span></span><br><span class="line">d2 = Drink.last</span><br><span class="line"></span><br><span class="line"><span class="symbol">id:</span> <span class="number">2</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;珍珠奶茶&quot;</span>,</span><br><span class="line"><span class="symbol">price:</span> <span class="number">0.6e2</span>,</span><br><span class="line"><span class="symbol">store_id:</span> <span class="number">1</span>,</span><br><span class="line"><span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"><span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">54</span><span class="symbol">:</span><span class="number">55.118310000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因為 belongs_to 可以利用 store 方法反查</span></span><br><span class="line">d2.store</span><br><span class="line"> <span class="symbol">id:</span> <span class="number">1</span>,</span><br><span class="line"> <span class="symbol">name:</span> <span class="string">&quot;五石蘭&quot;</span>,</span><br><span class="line"> <span class="symbol">tel:</span> <span class="string">&quot;031234567&quot;</span>,</span><br><span class="line"> <span class="symbol">address:</span> <span class="string">&quot;新竹縣&quot;</span>,</span><br><span class="line"> <span class="symbol">owner_id:</span> <span class="number">1</span>,</span><br><span class="line"> <span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"> <span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;</span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/18-model-relationship">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Model 關聯性 (1:1)</title>
      <link href="/2022/10/23/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-1-1/"/>
      <url>/2022/10/23/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E9%97%9C%E8%81%AF%E6%80%A7-1-1/</url>
      
        <content type="html"><![CDATA[<p>想好好學會 rails，不得不好好認識相當重要的關聯性，能夠理解並善用的話，你就能在各個 model 之間進行資料庫的溝通，拿到你想要的資料。</p><h2 id="Model-關聯性"><a href="#Model-關聯性" class="headerlink" title="Model 關聯性"></a>Model 關聯性</h2><p>Rails 的 Model 關聯主要有三種類型</p><ul><li>一對一 (1:1)</li><li>一對多 (1:N)</li><li>多對多 (N:N)</li></ul><p>今天這部分章節，會優先介紹 1 對 1。<br>我們用實際的例子來進行說明會更加清楚。</p><h3 id="1-1-一對一"><a href="#1-1-一對一" class="headerlink" title="1:1 一對一"></a>1:1 一對一</h3><p>假如我們今天想要開一間飲料店<br>我們會有一個店長 Owner<br>一個店長會有一間店 Store</p><p>假設每個店長可以開一間店，這種關係就是一對一的關係。<br>&#x3D;&gt; Owner has one store</p><p>可以先從 rails 中產生 Owner 的 Model 並生成對應的資料表來記錄店長的資訊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model Owner name phone:integer</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/59FadP9.png"></p><p>再產生 Store 的 Model 並生成對應的資料表來記錄商店的資訊，由於需要多一個 owner_id 所以透過指令 <code>owner:references</code> 或是 <code>owner:belongs_to</code> 來產生，這一個欄位可以讓我們知道</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails g model Store name tel address owner:references</span><br><span class="line">rails g model Store name tel address owner:belongs_to (同上一行)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RTjtkNT.png"></p><p><img src="https://i.imgur.com/QrbT5rU.png"><br>兩者的關係可以看到上圖表示，在 onwer 的 model 裡面可以加上對應的關聯，如果需要讓兩者之間有所關聯，belongs to 的那方就要有對應的 id 去紀錄，這邊就是透過 owner_id 。</p><h4 id="has-one-建立及產生的方法"><a href="#has-one-建立及產生的方法" class="headerlink" title="has one 建立及產生的方法"></a>has one 建立及產生的方法</h4><p>到 Owner model 建立 has_one 關聯</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Owner</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  has_one <span class="symbol">:store</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>關聯產生後就自動產生以下方法，你可以用來在 controller 傳遞資料時進行關聯的查找，或是 console 中操作資料時使用。</p><blockquote><p>store<br>store&#x3D;<br>build_store<br>create_store</p></blockquote><p>其中 build 和 create 差異，build 還沒存入資料庫，create 直接存入</p><p>用 console 建立一個 Owner 然後用 crate_store 建立一個 Store</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Owner.create(<span class="symbol">name:</span><span class="string">&quot;Sean&quot;</span>, <span class="symbol">phone:</span><span class="string">&quot;0912345678&quot;</span>)</span><br><span class="line"></span><br><span class="line">o1 = Owner.first</span><br><span class="line"></span><br><span class="line">o1.create_store(<span class="symbol">name:</span><span class="string">&quot;五石蘭&quot;</span>, <span class="symbol">tel:</span><span class="string">&quot;031234567&quot;</span>, <span class="symbol">address:</span><span class="string">&quot;新竹縣&quot;</span>)</span><br><span class="line"></span><br><span class="line">Store.last</span><br><span class="line"> <span class="symbol">id:</span> <span class="number">1</span>,</span><br><span class="line"> <span class="symbol">name:</span> <span class="string">&quot;五石蘭&quot;</span>,</span><br><span class="line"> <span class="symbol">tel:</span> <span class="string">&quot;031234567&quot;</span>,</span><br><span class="line"> <span class="symbol">address:</span> <span class="string">&quot;新竹縣&quot;</span>,</span><br><span class="line"> <span class="symbol">owner_id:</span> <span class="number">1</span>,</span><br><span class="line"> <span class="symbol">created_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>,</span><br><span class="line"> <span class="symbol">updated_at:</span> Fri, <span class="number">07</span> Oct <span class="number">2022</span> <span class="number">07</span><span class="symbol">:</span><span class="number">22</span><span class="symbol">:</span><span class="number">23.353390000</span> <span class="variable constant_">UTC</span> +<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="belongs-to-建立及產生的方法"><a href="#belongs-to-建立及產生的方法" class="headerlink" title="belongs_to 建立及產生的方法"></a>belongs_to 建立及產生的方法</h4><p>在 store 的 model 裡面也看到已經加好的關聯 (owner:references&#x2F;owner:belongs_to 自動產生)，如果沒有透過之前指令也可以自己加上去，或是你沒有要用到產生的方法也可以不寫。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &lt; <span class="title class_ inherited__">ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:owner</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>加上後也會因關聯產生後就自動產生以下方法</p><blockquote><p>owner<br>owner&#x3D;</p></blockquote><p>用上面建立好的 store 可以反向利用 owner 查到擁有者是誰，你也可以用 onwer&#x3D; 來更改擁有者的資料</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = Store.last</span><br><span class="line"></span><br><span class="line">s1.owner</span><br><span class="line">  Owner Load (<span class="number">0</span>.5ms)  <span class="variable constant_">SELECT</span> <span class="string">&quot;owners&quot;</span>.* <span class="variable constant_">FROM</span> <span class="string">&quot;owners&quot;</span> <span class="variable constant_">WHERE</span> <span class="string">&quot;owners&quot;</span>.<span class="string">&quot;id&quot;</span> = ? <span class="variable constant_">LIMIT</span> ?  [[<span class="string">&quot;id&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;LIMIT&quot;</span>, <span class="number">1</span>]]</span><br><span class="line"> =&gt;</span><br><span class="line">#&lt;Owner:0x00007f8e292a7308</span><br><span class="line"> id: 1,</span><br><span class="line"> name: &quot;Sean&quot;,</span><br><span class="line"> phone: &quot;0912345678&quot;,</span><br><span class="line"> created_at: Fri, 07 Oct 2022 07:18:45.627220000 UTC +00:00,</span><br><span class="line"> updated_at: Fri, 07 Oct 2022 07:18:45.627220000 UTC +00:00&gt;</span><br></pre></td></tr></table></figure><p>補充：</p><ol><li><p>has_one 跟 belongs_to 方法需要同時設定嗎？<br>不一定。如果不需要「從 Store 反查 Owner」的方法，那 belongs_to 就不需要設定了。或是不需要從 Owner 創建 store 或是查詢，也可以不用寫 has_one。</p></li><li><p>如果只設定 has_one 或 belongs_to 其中一項的話會怎樣？<br>有設定的話就會有方法，沒設定也沒關係，依造自己需要進行設定。</p></li></ol><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/18-model-relationship">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瀏覽器輸入網址後到出現頁面會發生什麼事情？</title>
      <link href="/2022/10/22/%E7%80%8F%E8%A6%BD%E5%99%A8%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80%E5%BE%8C%E5%88%B0%E5%87%BA%E7%8F%BE%E9%A0%81%E9%9D%A2%E6%9C%83%E7%99%BC%E7%94%9F%E4%BB%80%E9%BA%BC%E4%BA%8B%E6%83%85%EF%BC%9F/"/>
      <url>/2022/10/22/%E7%80%8F%E8%A6%BD%E5%99%A8%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80%E5%BE%8C%E5%88%B0%E5%87%BA%E7%8F%BE%E9%A0%81%E9%9D%A2%E6%9C%83%E7%99%BC%E7%94%9F%E4%BB%80%E9%BA%BC%E4%BA%8B%E6%83%85%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>最近面試被問到這個問題，發現裡面觀念牽涉很廣，每個步驟都可以單獨找到很多觀念跟理論，簡單分享以下四個主要的步驟。</p></div><h2 id="1-輸入網址"><a href="#1-輸入網址" class="headerlink" title="1. 輸入網址"></a>1. 輸入網址</h2><p>使用者輸入 (假設 <a href="https://google.com/maps/search/shop">https://google.com/maps/search/shop</a> )<br>因為瀏覽器無法根據 URL (Uniform Resource Locator) 直接定位到對應的資源，而是要根據 ip 才能找到，所以必須進行域名的解析</p><h2 id="2-進行域名解析-DNS-Domain-Name-System-得到-IP"><a href="#2-進行域名解析-DNS-Domain-Name-System-得到-IP" class="headerlink" title="2. 進行域名解析 DNS(Domain Name System) 得到 IP"></a>2. 進行域名解析 DNS(Domain Name System) 得到 IP</h2><p>瀏覽器透過作業系統從中解析出「通訊協定（Protocol）」、「網域（Domain）」、「路徑（Path）」等資訊，經過本地瀏覽器快取及 DNS server 等查找方式來找到跟這些域名對應的 <code>ip 位置</code><br><img src="https://i.imgur.com/SXwQRWv.png"></p><p>查找 ip 的順序 1. 檢查本地的 DNS 快取 2. 檢查電腦中的 .host 檔 3. 向 DNS 伺服器發送詢問</p><p>找到 ip 後丟回給瀏覽器，瀏覽器根據解析出的 IP，開始建立連線</p><h2 id="3-TCP-Transmission-Control-Protocol）開始進行三次握手建立連線"><a href="#3-TCP-Transmission-Control-Protocol）開始進行三次握手建立連線" class="headerlink" title="3. TCP (Transmission Control Protocol）開始進行三次握手建立連線"></a>3. TCP (Transmission Control Protocol）開始進行三次握手建立連線</h2><p>透過 TCP&#x2F;IP 協議 (是一種傳輸方式，browser 無法建立 HTTP、HTTPS、TCP 傳輸、從網址查找 IP，這些是由 TCP&#x2F;IP 傳輸協定做的)，經過三次握手建立連線，</p><p>三次握手指的是像下面的請求與回應。完成後便可以讓 client 與 server 建立連線</p><blockquote><p>client: 1.2.3.4 hello 你在嗎？ 我要準備跟你拿取資料摟<br>server: 我在喔，你可以來拿了。<br>client: 好，我要過去拿了</p></blockquote><p>連線建立後，如果通訊協定是 HTTPS，瀏覽器會與伺服器建立 TLS 加密；隨後，瀏覽器依照 IP 位置及 port（http 預設 80，https 預設 443），準備發送請求並將資訊打包成一個個封包開始進行傳輸。</p><h2 id="4-發送-http-請求（後端資料處理、前端畫面渲染）"><a href="#4-發送-http-請求（後端資料處理、前端畫面渲染）" class="headerlink" title="4. 發送 http 請求（後端資料處理、前端畫面渲染）"></a>4. 發送 http 請求（後端資料處理、前端畫面渲染）</h2><p>建立連線之後，就發送請求 (Request)，server 再根據請求的動作(get, post)決定後續資料的處理，在 server 端主要會是以 MVC 架構的流程進行 （<a href="https://oseanchen.github.io/2022/10/13/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AMVC%20%E6%98%AF%E7%94%9A%E9%BA%BC/">MVC 概念參考這篇介紹</a>）</p><p>假設我們是要呈現出 google 目前的首頁頁面，routes 會帶我們找到對應 controller 的 action 上面，根據 action 寫好的方法，請 model 向資料庫溝通拿取對應的資料，回到 controller 再根據 action 將資料處理成最後 view 要使用的物件，交給對應的 view 去進行呈現。</p><hr><p>參考資料：</p><ol><li><a href="https://ithelp.ithome.com.tw/articles/10228442">(鐵人賽) 從輸入網址列到渲染畫面，過程經歷了什麼事情？</a></li><li><a href="https://roykwokcode.medium.com/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E8%80%83%E5%AE%98-%E5%BE%9E%E4%BD%A0%E8%BC%B8%E5%85%A5%E7%B6%B2%E5%9D%80-%E5%88%B0%E7%B6%B2%E9%A0%81%E5%87%BA%E7%8F%BE-%E9%80%99%E9%81%8E%E7%A8%8B%E5%88%B0%E7%99%BC%E7%94%9F%E4%BA%86%E4%BB%80%E9%BA%BC-414dc3404619">前端面試考官：從你輸入網址，到網頁出現，這過程到發生了什麼？</a></li><li><a href="https://www.youtube.com/watch?v=AlkDbnbv7dk&ab_channel=ByteByteGo">What happens when you type a URL into your browser?</a></li><li><a href="https://w3c.hexschool.com/blog/8d691e4f">[熱門面試題] 從輸入網址列到渲染畫面，過程經歷了什麼事？</a></li><li><a href="https://www.cythilya.tw/2018/11/26/what-happens-when-you-type-an-url-in-the-browser-and-press-enter/">在瀏覽器輸入網址並送出後，到底發生了什麼事？</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 網路概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> RESTful </tag>
            
            <tag> 網路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Migration</title>
      <link href="/2022/10/22/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AMigration/"/>
      <url>/2022/10/22/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AMigration/</url>
      
        <content type="html"><![CDATA[<h2 id="Migration-是什麼"><a href="#Migration-是什麼" class="headerlink" title="Migration 是什麼"></a>Migration 是什麼</h2><p>就是一個紀錄「資料庫的架構」的檔案，我們可以知道目前資料庫的欄位有什麼？、型態是什麼？，也可以知道目前修改的紀錄與過程。可以跟著 git 一起把資料庫架構變更的進行版本控制。</p><h2 id="建立-Migration"><a href="#建立-Migration" class="headerlink" title="建立 Migration"></a>建立 Migration</h2><p>利用之前 article 的例子來看，先產生一個 article 的 model<br><code>rails g model Article title content:text</code></p><p>會長出下面的 migration 紀錄</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateArticles</span> &lt; <span class="title class_ inherited__">ActiveRecord::Migration</span>[<span class="number">6.1</span>]</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">change</span></span><br><span class="line">    create_table <span class="symbol">:articles</span> <span class="keyword">do</span> |<span class="params">t</span>|</span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.text <span class="symbol">:content</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看到有 title 及 content 資訊，還有<a href="https://ithelp.ithome.com.tw/articles/10303421">先前文章</a>提到 id (不會顯示) 及 timestamps。</p><p>這邊只是先將資料表的內容描述好，需要進行 <code>rails db:migrate</code> 這個指令之後才可以把相關的資料表<strong>具象化</strong>，你可以想像成 rails 幫我們依照 migration 去做出對應的資料表。</p><h2 id="修改-Migration"><a href="#修改-Migration" class="headerlink" title="修改 Migration"></a>修改 Migration</h2><p>前面提到具象化後我們的資料表就會依照 migration 去產生，但如果我們發現有些欄位需要調整應該怎麼辦？<br>像是我們如果要把上面再加入一個欄位叫做 tag 並且為 string 的類型。</p><p>我們可以先進行 <code>rails db:rollback</code> 將具現化的資料表退回還沒具現化的狀態，就可以進行修改</p><p>修改的方式：</p><ol><li>直接修改原本 migration</li><li>再新增一個新的 migration</li></ol><p>建議使用第 2 種，因為如果多人協作，這樣在進行 git 版控的時候就會把新增的 migration 一起同步，其他人也不用 rollback 再 migrate，也可以避免原本檔案修改的時候動到其他資料。</p><h3 id="新增-column"><a href="#新增-column" class="headerlink" title="新增 column"></a>新增 column</h3><p>新增一個 migration，通常命名會是 add_column_to_model 這樣的格式，你可以自己命名。<br><code>rails g migration add_tag_to_article</code></p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AddTagToArticle</span> &lt; <span class="title class_ inherited__">ActiveRecord::Migration</span>[<span class="number">6.1</span>]</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">change</span></span><br><span class="line">    add_column <span class="symbol">:articles</span>, <span class="symbol">:tag</span>, <span class="symbol">:string</span></span><br><span class="line">    <span class="comment">#           table 名, 欄位, 格式</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果要全部自動產生也可以，可以像這樣輸入，會產生跟上面一樣的效果，但有時候比較細部的調整還是會自己手動。<br><code>rails g migration add_tag_to_articles tag:string</code></p><h3 id="移除-column"><a href="#移除-column" class="headerlink" title="移除 column"></a>移除 column</h3><p>也可以進行移除，類似上面的格式，但前面改成，remove_column</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AddTagToArticle</span> &lt; <span class="title class_ inherited__">ActiveRecord::Migration</span>[<span class="number">6.1</span>]</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">change</span></span><br><span class="line">    remove_column <span class="symbol">:articles</span>, <span class="symbol">:content</span>, <span class="symbol">:text</span></span><br><span class="line">    <span class="comment">#              table 名, 欄位, 格式</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之後記得再進行一次 migration。</p><h3 id="如果沒寫好就進行-migration"><a href="#如果沒寫好就進行-migration" class="headerlink" title="如果沒寫好就進行 migration?"></a>如果沒寫好就進行 migration?</h3><p>不會怎麼樣，就執行了一個空的 Migration，可能就會看到 Migration 檔案裡就有寫這些欄位，但 schema.rb 檔案裡卻沒有的情況。可以在 rollback 回去重新調整在進行一次 migrate。</p><h2 id="一些常用的相關指令"><a href="#一些常用的相關指令" class="headerlink" title="一些常用的相關指令"></a>一些常用的相關指令</h2><ul><li><p>新增<br><code>rails g migration ...</code></p></li><li><p>刪除<br><code>rails d migration ...</code></p></li><li><p>把整個資料庫內容移除 (所有建立好的資料都會移除)<br><code>rails db:drop</code></p></li><li><p>重新建立資料庫<br><code>rails db:create</code></p></li><li><p>檢查所有 migration 狀況<br><code>rails db:migrate:status</code></p></li></ul><p>可以看到下面這樣得狀態顯示，<code>up</code> 表示已經 migrate 過的檔案，<code>down</code> 還沒具象化。<br>可以用這邊檢視目前哪些檔案還沒具象化</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rails <span class="symbol">db:</span><span class="symbol">migrate:</span>status</span><br><span class="line"></span><br><span class="line">Running via Spring preloader <span class="keyword">in</span> process <span class="number">30265</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">database:</span> db/development.sqlite3</span><br><span class="line"></span><br><span class="line"> Status   Migration <span class="variable constant_">ID</span>    Migration Name</span><br><span class="line">--------------------------------------------------</span><br><span class="line">   up     <span class="number">20221002055926</span>  Create stores</span><br><span class="line">   up     <span class="number">20221002153623</span>  Create articles</span><br><span class="line">  down    <span class="number">20221005091102</span>  Add tag to article</span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ol><li><a href="https://guides.rubyonrails.org/active_record_migrations.html">Rails Guide</a></li><li><a href="https://railsbook.tw/chapters/17-model-migration#what-is-migration">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Model 相關介紹 及 CRUD (下)</title>
      <link href="/2022/10/22/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E7%9B%B8%E9%97%9C%E4%BB%8B%E7%B4%B9-%E5%8F%8A-CRUD-%E4%B8%8B/"/>
      <url>/2022/10/22/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E7%9B%B8%E9%97%9C%E4%BB%8B%E7%B4%B9-%E5%8F%8A-CRUD-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>接著上一篇我們繼續說明用 ORM 來操作 CRUD 的部分 關於讀取的部分還可以怎麼去找到，還有後面的 update 及 delete 的說明。</p><h2 id="更精準的讀取-find-amp-find-by-amp-Where"><a href="#更精準的讀取-find-amp-find-by-amp-Where" class="headerlink" title="更精準的讀取 find &amp; find_by &amp; Where"></a>更精準的讀取 find &amp; find_by &amp; Where</h2><h3 id="find-amp-find-by"><a href="#find-amp-find-by" class="headerlink" title="find &amp; find_by"></a>find &amp; find_by</h3><blockquote><p>用 find 來找 id<br><code>Model.find(:id)</code><br>find_by 可以找特定欄位的資訊是否有對應的資料<br><code>Model.find_by(欄位名: 值)</code></p></blockquote><p>兩者的差異：</p><ul><li>find 只能找 id，find_by 可以找任何資料表內的東西</li><li>find 找不到會出錯， find_by 只會回傳 nil</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> a1 <span class="operator">=</span> Article.find(<span class="number">1</span>)</span><br><span class="line">  Article Load (<span class="number">0.2</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> &quot;articles&quot;.&quot;id&quot; <span class="operator">=</span> ? LIMIT ?  [[&quot;id&quot;, <span class="number">1</span>], [&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.8330...</span><br><span class="line"></span><br><span class="line">3.0.0 :002 &gt; a2 = Article.find_by(id: 2)</span><br><span class="line">  Article Load (0.3ms)  SELECT &quot;articles&quot;.* FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 2], [&quot;LIMIT&quot;, 1]]</span><br><span class="line"> =&gt; #&lt;Article id: 2, title: &quot;文章<span class="number">2</span>&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-04</span> <span class="number">09</span>:<span class="number">31</span>:<span class="number">49.206583000</span> <span class="operator">+</span><span class="number">0000</span>&quot;,...</span><br><span class="line"></span><br><span class="line">3.0.0 :003 &gt; a2 = Article.find_by(title: &quot;文章<span class="number">2</span>&quot;)</span><br><span class="line">  Article Load (0.3ms)  SELECT &quot;articles&quot;.* FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;title&quot; = ? LIMIT ?  [[&quot;title&quot;, &quot;文章<span class="number">2</span>&quot;], [&quot;LIMIT&quot;, 1]]</span><br><span class="line"> =&gt; #&lt;Article id: 2, title: &quot;文章<span class="number">2</span>&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-04</span> <span class="number">09</span>:<span class="number">31</span>:<span class="number">49.206583000</span> <span class="operator">+</span><span class="number">0000</span>&quot;,...</span><br></pre></td></tr></table></figure><p>找不到資料時的差別</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> a3 <span class="operator">=</span> Article.find_by(id: <span class="number">3</span>)</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> &quot;articles&quot;.&quot;id&quot; <span class="operator">=</span> ? LIMIT ?  [[&quot;id&quot;, <span class="number">3</span>], [&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> nil</span><br><span class="line"></span><br><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">002</span> <span class="operator">&gt;</span> a3 <span class="operator">=</span> Article.find(<span class="number">3</span>)</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> &quot;articles&quot;.&quot;id&quot; <span class="operator">=</span> ? LIMIT ?  [[&quot;id&quot;, <span class="number">3</span>], [&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">        <span class="number">1</span>: <span class="keyword">from</span> (irb):<span class="number">13</span>:<span class="keyword">in</span> `<span class="operator">&lt;</span>main<span class="operator">&gt;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">ActiveRecord::RecordNotFound (Couldn&#x27;</span>t find Article <span class="keyword">with</span> <span class="string">&#x27;id&#x27;</span><span class="operator">=</span><span class="number">3</span>)</span><br><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">014</span> <span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>where 可以搭配一些篩選條件，比如過 id &gt; 1，內容包含某些資料之類的條件等等，</p><p>我們再建立第 3 筆文章資料，然後透過 where 篩選 id &gt; 1 看看吧。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> Article.all</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="comment">/* loading for inspect */</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">11</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>ActiveRecord::Relation [#<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;, updated_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;<span class="operator">&gt;</span>, #<span class="operator">&lt;</span>Article id: <span class="number">2</span>, title: &quot;文章2&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;, updated_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;<span class="operator">&gt;</span>, #<span class="operator">&lt;</span>Article id: <span class="number">3</span>, title: &quot;文章3&quot;, content: &quot;MVC是什麼？&quot;, created_at: &quot;2022-10-04 10:10:05.905998000 +0000&quot;, updated_at: &quot;2022-10-04 10:10:05.905998000 +0000&quot;<span class="operator">&gt;</span>]<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">002</span> <span class="operator">&gt;</span> Article.where(&quot;id &gt; 1&quot;)</span><br><span class="line">  Article Load (<span class="number">0.4</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> (id <span class="operator">&gt;</span> <span class="number">1</span>) <span class="comment">/* loading for inspect */</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">11</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>ActiveRecord::Relation [#<span class="operator">&lt;</span>Article id: <span class="number">2</span>, title: &quot;文章2&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;, updated_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;<span class="operator">&gt;</span>, #<span class="operator">&lt;</span>Article id: <span class="number">3</span>, title: &quot;文章3&quot;, content: &quot;MVC是什麼？&quot;, created_at: &quot;2022-10-04 10:10:05.905998000 +0000&quot;, updated_at: &quot;2022-10-04 10:10:05.905998000 +0000&quot;<span class="operator">&gt;</span>]<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到根據條件就撈出 id&#x3D;2、id&#x3D;3 兩篇文章的資料。</p><h2 id="Update-更新"><a href="#Update-更新" class="headerlink" title="Update 更新"></a>Update 更新</h2><h3 id="用-save-更新"><a href="#用-save-更新" class="headerlink" title="用 save 更新"></a>用 save 更新</h3><p>先找到要的資料，然後修改欄位數值，再用 save 更新</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a1 = Article.find_by(<span class="symbol">id:</span> <span class="number">1</span>)</span><br><span class="line">a1.title = <span class="string">&quot;第一篇文章&quot;</span></span><br><span class="line">a1.save</span><br></pre></td></tr></table></figure><h3 id="使用-update-attribute"><a href="#使用-update-attribute" class="headerlink" title="使用 update_attribute"></a>使用 update_attribute</h3><p>只更新單一欄位的值 (attribute 是單數)，注意會跳過驗證</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1.update_attribute(<span class="symbol">:title</span>, <span class="string">&quot;第一篇文章&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-update-amp-update-attributes"><a href="#使用-update-amp-update-attributes" class="headerlink" title="使用 update &amp; update_attributes"></a>使用 update &amp; update_attributes</h3><p>兩個方法只是名稱不同，都可一次更新多個欄位，且不需要再呼叫 save 方法</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1.update(<span class="symbol">title:</span> <span class="string">&quot;第一篇文章&quot;</span>, <span class="symbol">content:</span> <span class="string">&quot;你知道要怎麼印出&#x27;hello world&#x27;嗎？&quot;</span>)</span><br><span class="line">a1.update_attributes(<span class="symbol">title:</span> <span class="string">&quot;第一篇文章&quot;</span>, <span class="symbol">content:</span> <span class="string">&quot;你知道要怎麼印出&#x27;hello world&#x27;嗎？&quot;</span>)</span><br></pre></td></tr></table></figure><p>實際在 console 裡面操作的情形</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> a1 <span class="operator">=</span> Article.find(<span class="number">1</span>)</span><br><span class="line">   (<span class="number">0.4</span>ms)  <span class="keyword">SELECT</span> sqlite_version(<span class="operator">*</span>)</span><br><span class="line">  Article Load (<span class="number">0.1</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> &quot;articles&quot;.&quot;id&quot; <span class="operator">=</span> ? LIMIT ?  [[&quot;id&quot;, <span class="number">1</span>], [&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.8330...</span><br><span class="line"></span><br><span class="line">3.0.0 :002 &gt; a1.update_attribute(:title, &quot;第一篇文章&quot;)</span><br><span class="line">  TRANSACTION (0.1ms)  begin transaction</span><br><span class="line">  Article Update (0.7ms)  UPDATE &quot;articles&quot; SET &quot;title&quot; = ?, &quot;updated_at&quot; = ? WHERE &quot;articles&quot;.&quot;id&quot; = ?  [[&quot;title&quot;, &quot;第一篇文章&quot;], [&quot;updated_at&quot;, &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-04</span> <span class="number">10</span>:<span class="number">20</span>:<span class="number">44.717780</span>&quot;], [&quot;id&quot;, 1]]</span><br><span class="line">  TRANSACTION (0.9ms)  commit transaction</span><br><span class="line"> =&gt; true</span><br><span class="line"></span><br><span class="line">3.0.0 :003 &gt; a1.title = &quot;改回文章<span class="number">1</span>&quot;</span><br><span class="line"> =&gt; &quot;改回文章<span class="number">1</span>&quot;</span><br><span class="line"></span><br><span class="line">3.0.0 :004 &gt; a1.save</span><br><span class="line">  TRANSACTION (0.1ms)  begin transaction</span><br><span class="line">  Article Update (0.7ms)  UPDATE &quot;articles&quot; SET &quot;title&quot; = ?, &quot;updated_at&quot; = ? WHERE &quot;articles&quot;.&quot;id&quot; = ?  [[&quot;title&quot;, &quot;改回文章<span class="number">1</span>&quot;], [&quot;updated_at&quot;, &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-04</span> <span class="number">10</span>:<span class="number">21</span>:<span class="number">31.485894</span>&quot;], [&quot;id&quot;, 1]]</span><br><span class="line">  TRANSACTION (1.0ms)  commit transaction</span><br><span class="line"> =&gt; true</span><br></pre></td></tr></table></figure><h2 id="Delete-刪除"><a href="#Delete-刪除" class="headerlink" title="Delete 刪除"></a>Delete 刪除</h2><p>刪除有 <code>delete</code> 及 <code>destroy</code> 兩種方法，可以將資料刪除。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1 = Article.find_by(<span class="symbol">id:</span> <span class="number">1</span>)</span><br><span class="line">a1.destroy</span><br><span class="line">a1.delete</span><br><span class="line"></span><br><span class="line"><span class="comment">## 等同於從 model 直接找id進行刪除</span></span><br><span class="line">Article.destroy(<span class="number">1</span>)</span><br><span class="line">Article.delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>終端機操作的顯示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> a1 <span class="operator">=</span> Article.find(<span class="number">1</span>)</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">WHERE</span> &quot;articles&quot;.&quot;id&quot; <span class="operator">=</span> ? LIMIT ?  [[&quot;id&quot;, <span class="number">1</span>], [&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;改回文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21....</span><br><span class="line"></span><br><span class="line">3.0.0 :002 &gt; a1.destroy</span><br><span class="line">  TRANSACTION (0.1ms)  begin transaction</span><br><span class="line">  Article Destroy (0.7ms)  DELETE FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;id&quot; = ?  [[&quot;id&quot;, 1]]</span><br><span class="line">  TRANSACTION (0.9ms)  commit transaction</span><br><span class="line"> =&gt; #&lt;Article id: 1, title: &quot;改回文章<span class="number">1</span>&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-03</span> <span class="number">12</span>:<span class="number">41</span>:<span class="number">21.833091000</span> <span class="operator">+</span><span class="number">0000</span>&quot;, updated_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-04</span> <span class="number">10</span>:<span class="number">21</span>:<span class="number">31.485894000</span> <span class="operator">+</span><span class="number">0000</span>&quot;&gt;</span><br><span class="line"></span><br><span class="line">3.0.0 :003 &gt; Article.delete(2)</span><br><span class="line">  Article Destroy (1.9ms)  DELETE FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;id&quot; = ?  [[&quot;id&quot;, 2]]</span><br><span class="line"> =&gt; 1</span><br><span class="line"></span><br><span class="line">3.0.0 :009 &gt; a2 = Article.find(2)</span><br><span class="line">  Article Load (0.3ms)  SELECT &quot;articles&quot;.* FROM &quot;articles&quot; WHERE &quot;articles&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 2], [&quot;LIMIT&quot;, 1]]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">        1: from (irb):9:in `&lt;main&gt;&#x27;</span><br><span class="line">ActiveRecord::RecordNotFound (Couldn&#x27;t find Article with &#x27;id&#x27;=2)</span><br></pre></td></tr></table></figure><blockquote><p>destroy 跟 delete 的差別：</p><ul><li>destroy 方法執行的時候，會執行完整的回呼（Callback)</li><li>delete 方法直接執行 SQL 的 delete from 語法，不會進行任何回呼。</li></ul></blockquote><hr><p>參考資料：</p><ol><li><a href="https://guides.rubyonrails.org/active_record_basics.html">Rails Guide</a></li><li><a href="https://railsbook.tw/chapters/16-model-basic">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Model 相關介紹 及 CRUD (上)</title>
      <link href="/2022/10/19/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E7%9B%B8%E9%97%9C%E4%BB%8B%E7%B4%B9-%E5%8F%8A-CRUD-%E4%B8%8A/"/>
      <url>/2022/10/19/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AModel-%E7%9B%B8%E9%97%9C%E4%BB%8B%E7%B4%B9-%E5%8F%8A-CRUD-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>前面的章節有提到過 Model 其實就是一個幫忙與資料庫溝通的地方，他既不是資料庫（Database）也不是資料表（Table），Model 可以當成一個抽象類別，負責跟實體的資料表溝通。</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>先來簡單說文解字一下這四個基本的字，”CRUD”的意義吧！主要是描述下面這四個字。</p><ul><li>Create (C) 新增，建立資料，將定義好的欄位寫入對應的值</li><li>Read (R) 讀取，讀取資料，查詢資料的相關內容</li><li>Update (U) 更新，更新特定欄位的資料</li><li>Delete (D) 刪除，刪除資料</li></ul><p>我們可以透過基本的 ORM 操作來感受一下 rails 如何用到上面的這些操作資料的動作吧，操作前先簡單解釋一下相關的專有名詞，也是許多面試常常會問到的觀念。</p><h3 id="ORM？"><a href="#ORM？" class="headerlink" title="ORM？"></a>ORM？</h3><p>ORM 是 Object Relational Mapping 的縮寫，翻譯成「物件關聯對映」。如果想要存取資料庫裡的內容，在以前必須自己撰寫資料庫查詢語言（SQL）對資料庫進行查詢，但透過 ORM 的技術包裝之後，可以讓我們用操作「物件」的方式來操作資料庫。</p><h3 id="Active-Record"><a href="#Active-Record" class="headerlink" title="Active Record?"></a>Active Record?</h3><p>Active Record 是一種設計模式，MVC 中的 Model 就是根據 Active Record 的 模式設計出來的，另外一種常見的說法是 Active Record 是 ORM 的實作方式。</p><h4 id="Active-Record-的好處"><a href="#Active-Record-的好處" class="headerlink" title="Active Record 的好處"></a>Active Record 的好處</h4><ul><li>使用物件導向的方式來操作資料表</li><li>展現 Model 之間的關係</li><li>表示出相關 Model 之間的繼承關係</li><li>在存取到資料庫之前驗證資料</li></ul><h2 id="用-ORM-方式來操作-CRUD"><a href="#用-ORM-方式來操作-CRUD" class="headerlink" title="用 ORM 方式來操作 CRUD"></a>用 ORM 方式來操作 CRUD</h2><h3 id="建立-model"><a href="#建立-model" class="headerlink" title="建立 model"></a>建立 model</h3><p>我們先建立一個文章 Article 的 Model，在終端機輸入下面指令就可以建立，同時也定義 2 個欄位給他，分別是</p><ul><li>string 型態的 <code>title</code></li><li>text 型態的 <code>content</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model Article title:string content:text</span><br></pre></td></tr></table></figure><p>會產生對應的資料表，我們可以在 app&#x2F;db 下面看到 migration 檔案，migration 會記錄建立 table 的經過，具備哪些欄位，我們在輸入 db:migrate 將 table 具現化，才能對裡面的內容進行操作</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateArticles</span> &lt; <span class="title class_ inherited__">ActiveRecord::Migration</span>[<span class="number">6.1</span>]</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">change</span></span><br><span class="line">    create_table <span class="symbol">:articles</span> <span class="keyword">do</span> |<span class="params">t</span>|</span><br><span class="line">      t.string <span class="symbol">:title</span></span><br><span class="line">      t.text <span class="symbol">:content</span></span><br><span class="line"></span><br><span class="line">      t.timestamps</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>從上面看似乎還會有 timestamps 這個資料欄位，但其實總共還會多出 <code>id</code>、<code>timestamps</code> ，timestamps 在經過轉換之後，會產生兩個名為 created_at 跟 updated_at 的時間欄位，分別會在資料「新增」及「更新」的時候，把當下的時間寫入，可以作為一個紀錄，讓你知道某筆資料的變動。<br>id 欄位則是在 Migration 沒辦法看到任何資訊，因為這是 Rails 自動幫每個資料表加的流水編號欄位，也稱為資料表的主鍵（Primary Key）。方便讓你知道目前這個 table 建立過幾筆資料，查找上也會比較方便。</p><p>可以從下面預設的 app&#x2F;db&#x2F;development.sqlite3 的檔案看到實際所有的欄位<br><img src="https://i.imgur.com/NE0fTG8.png"></p><h3 id="Create-建立"><a href="#Create-建立" class="headerlink" title="Create 建立"></a>Create 建立</h3><p>可以從 rails console 裡面來操作實際建立一筆資料，終端機輸入 <code>rails console</code> or <code>rails c</code> 之後<br>我們可以使用 active record 提供給我們的方法</p><ol><li>create</li><li>new<br>兩者的差別是，new 完需要 save 才會存入資料庫，create 則會直接寫入。<br>我們用 create 的方式來看一下。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> Article.create(title:&quot;文章1&quot;,content:&quot;進入ruby世界說hello world&quot;)</span><br><span class="line">   (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> sqlite_version(<span class="operator">*</span>)</span><br><span class="line">  TRANSACTION (<span class="number">0.0</span>ms)  <span class="keyword">begin</span> transaction</span><br><span class="line">  Article <span class="keyword">Create</span> (<span class="number">0.4</span>ms)  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;articles&quot; (&quot;title&quot;, &quot;content&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) <span class="keyword">VALUES</span> (?, ?, ?, ?)  [[&quot;title&quot;, &quot;文章1&quot;], [&quot;content&quot;, &quot;進入ruby世界說hello world&quot;], [&quot;created_at&quot;, &quot;2022-10-03 12:41:21.833091&quot;], [&quot;updated_at&quot;, &quot;2022-10-03 12:41:21.833091&quot;]]</span><br><span class="line">  TRANSACTION (<span class="number">0.4</span>ms)  <span class="keyword">commit</span> transaction</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;, updated_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到上面 有出現 INSERT INTO “articles” 這個 SQL 語法，表示已經將檔案寫入資料庫</p><h3 id="Read-讀取"><a href="#Read-讀取" class="headerlink" title="Read 讀取"></a>Read 讀取</h3><p>想要取得資料表中的第一筆或最後一筆資料，可使用 <code>first</code> 或 <code>last</code> 方法，我們用 last 來讀看看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">002</span> <span class="operator">&gt;</span> a1 <span class="operator">=</span> Article.last</span><br><span class="line">  Article Load (<span class="number">0.5</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;articles&quot;.&quot;id&quot; <span class="keyword">DESC</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10...</span><br><span class="line"></span><br><span class="line">4.3.0.0 :003 &gt; a1</span><br><span class="line"> =&gt; #&lt;Article id: 1, title: &quot;文章<span class="number">1</span>&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-03</span> <span class="number">12</span>:<span class="number">41</span>:<span class="number">21.833091000</span> <span class="operator">+</span><span class="number">0000</span>&quot;, updated_at: &quot;<span class="number">2022</span><span class="number">-10</span><span class="number">-03</span> <span class="number">12</span>:<span class="number">41</span>:<span class="number">21.833091000</span> <span class="operator">+</span><span class="number">0000</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p>讀取最後一筆 (目前也只有一筆) 資料並且放入變數 a1 中，可以看到顯示出所有這筆資料的欄位及值，除了我們說的定義的欄位之外還有多出那 3 個前面提到的欄位。</p><p>我們也用一下 new 方法讓大家看一下，需要再用 save 進行資料的寫入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">001</span> <span class="operator">&gt;</span> a2 <span class="operator">=</span> Article.new(title:&quot;文章2&quot;, content:&quot;CRUD是什麼？&quot;)</span><br><span class="line">   (<span class="number">0.6</span>ms)  <span class="keyword">SELECT</span> sqlite_version(<span class="operator">*</span>)</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: nil, title: &quot;文章2&quot;, content: &quot;CRUD是什麼？&quot;, created_at: nil, updated_at: nil<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">002</span> <span class="operator">&gt;</span> a2.save</span><br><span class="line">  TRANSACTION (<span class="number">0.2</span>ms)  <span class="keyword">begin</span> transaction</span><br><span class="line">  Article <span class="keyword">Create</span> (<span class="number">1.1</span>ms)  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;articles&quot; (&quot;title&quot;, &quot;content&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) <span class="keyword">VALUES</span> (?, ?, ?, ?)  [[&quot;title&quot;, &quot;文章2&quot;], [&quot;content&quot;, &quot;CRUD是什麼？&quot;], [&quot;created_at&quot;, &quot;2022-10-04 09:31:49.206583&quot;], [&quot;updated_at&quot;, &quot;2022-10-04 09:31:49.206583&quot;]]</span><br><span class="line">  TRANSACTION (<span class="number">0.8</span>ms)  <span class="keyword">commit</span> transaction</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>看到 save 之後有回傳一個 true 表示有成功寫入。</p><p>也可以來用 first 抓看看我們的資料，先用 Article.all 看一下全部是有兩筆資料，然後可以用 first，也可以用 first(number)，括號內可以指定要從第一筆開始抓幾筆。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">004</span> <span class="operator">&gt;</span> Article.all</span><br><span class="line">Article Load (<span class="number">0.5</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="comment">/* loading for inspect */</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">11</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>ActiveRecord::Relation [#<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;, updated_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;<span class="operator">&gt;</span>, #<span class="operator">&lt;</span>Article id: <span class="number">2</span>, title: &quot;文章2&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;, updated_at: &quot;2022-10-04 09:31:49.206583000 +0000&quot;<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.0</span><span class="number">.0</span> :<span class="number">004</span> <span class="operator">&gt;</span> Article.first</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;articles&quot;.&quot;id&quot; <span class="keyword">ASC</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">1</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> #<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;, updated_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span> :<span class="number">005</span> <span class="operator">&gt;</span> Article.first(<span class="number">2</span>)</span><br><span class="line">  Article Load (<span class="number">0.3</span>ms)  <span class="keyword">SELECT</span> &quot;articles&quot;.<span class="operator">*</span> <span class="keyword">FROM</span> &quot;articles&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;articles&quot;.&quot;id&quot; <span class="keyword">ASC</span> LIMIT ?  [[&quot;LIMIT&quot;, <span class="number">2</span>]]</span><br><span class="line"> <span class="operator">=</span><span class="operator">&gt;</span> [#<span class="operator">&lt;</span>Article id: <span class="number">1</span>, title: &quot;文章1&quot;, content: &quot;進入ruby世界說hello world&quot;, created_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;, updated_at: &quot;2022-10-03 12:41:21.833091000 +0000&quot;<span class="operator">&gt;</span>, #<span class="operator">&lt;</span>Article id: <span class="number">2</span>, title: &quot;文章2&quot;, content: &quot;CRUD是什麼？&quot;, created_at: &quot;2022-10-04 09:31:49</span><br></pre></td></tr></table></figure><p>下篇再來繼續說明一些讀取的方法、更新及刪除的部分。</p><p>－－－</p><p>參考資料：</p><ol><li><a href="https://guides.rubyonrails.org/active_record_basics.html">Rails Guide</a></li><li><a href="https://railsbook.tw/chapters/16-model-basic">為你自己學 Ruby on Rails</a></li><li><a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">wiki ORM</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Controller 及 View</title>
      <link href="/2022/10/18/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AController-%E5%8F%8A-View/"/>
      <url>/2022/10/18/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AController-%E5%8F%8A-View/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>開頭先來回顧一下前面的圖片，今天來解釋一下我們 MVC 一直提到的 C (Controller) 及 C (View) 部分，前兩篇講完 routes 的部分，接著當解讀完 routes 之後就是將工作轉往 controller 及 action 的部分，將後續資料的呈現及使用者的動作做完。<br><img src="https://i.imgur.com/hf9CtBC.png"></p></div><h2 id="Controller-與-V-iew-是什麼呢？"><a href="#Controller-與-V-iew-是什麼呢？" class="headerlink" title="Controller 與 Ｖ iew 是什麼呢？"></a>Controller 與 Ｖ iew 是什麼呢？</h2><p><code>Controller</code> 是要拿來做什麼用的？ 從意思來看應該可以看到 control 這個單字，表示是要來進行一些控制的部分，主要是控制資料的流程。他可能會進行：</p><ul><li>跟 Model 要資料</li><li>把從 Model 收到的資料丟給 View</li><li>需要存取外部服務（例如金流串接）等</li></ul><p><code>View</code> 的話則是可以將 Controller 的資料呈現出來，就是一種回傳 HTML 的方法。</p><h2 id="和路徑設定的關聯"><a href="#和路徑設定的關聯" class="headerlink" title="和路徑設定的關聯"></a>和路徑設定的關聯</h2><p>前面一篇提到的文章相關路徑設計，其實我們 resources 後面符號，用複數名稱對應到的就是 controller 的名字</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:articles</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>還記得路徑中有對應的 controller 及 action 吧</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rails routes -c articles</span><br><span class="line">   Prefix    Verb   <span class="variable constant_">URI</span> Pattern                  Controller<span class="comment">#Action</span></span><br><span class="line">    articles <span class="variable constant_">GET</span>    /articles(.<span class="symbol">:format</span>)          articles<span class="comment">#index</span></span><br><span class="line">             <span class="variable constant_">POST</span>   /articles(.<span class="symbol">:format</span>)          articles<span class="comment">#create</span></span><br><span class="line"> new_article <span class="variable constant_">GET</span>    /articles/new(.<span class="symbol">:format</span>)      articles<span class="comment">#new</span></span><br><span class="line">edit_article <span class="variable constant_">GET</span>    /articles/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>) articles<span class="comment">#edit</span></span><br><span class="line">     article <span class="variable constant_">GET</span>    /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#show</span></span><br><span class="line">             <span class="variable constant_">PATCH</span>  /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">             <span class="variable constant_">PUT</span>    /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">             <span class="variable constant_">DELETE</span> /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#destroy</span></span><br></pre></td></tr></table></figure><h2 id="建立-controller"><a href="#建立-controller" class="headerlink" title="建立 controller"></a>建立 controller</h2><p>可以手動建立或是在終端機請 rails 幫我們建立，可以長出相關的檔案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate controller articles</span><br></pre></td></tr></table></figure><p>看一下檔案名稱及內部長怎麼樣吧<br><img src="https://i.imgur.com/8DOdnEX.png"></p><p>會在 <code>app/controller</code> 下面產生出相關的檔案，可以注意到 controller 名稱是叫做<code>articles_controller.rb</code>，點開檔案內部看看。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticlesController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>裡面是一個類別叫做 ArticlesController 並且繼承自 ApplicationController<br>可以注意到檔名跟類別名稱不同，檔名是用蛇式、類別名稱則是大駝峰。</p><h2 id="撰寫-action-對應到-view-去吧"><a href="#撰寫-action-對應到-view-去吧" class="headerlink" title="撰寫 action 對應到 view 去吧"></a>撰寫 action 對應到 view 去吧</h2><p>如果我們只有寫好路徑，到那些我們想去的位置例如 index 的位置 (&#x2F;articles) 會看到瀏覽器上面顯示錯誤訊息找不到 action</p><p><img src="https://i.imgur.com/UqPD5vf.png"></p><p>所以現在要寫個 index action 到 controller 裡面<br>同時也需要對應給個 view 的檔案讓這個 action 知道要把相關的資料控制到哪邊</p><h3 id="action-建立"><a href="#action-建立" class="headerlink" title="action 建立"></a>action 建立</h3><p>定義一個 index 的 action</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticlesController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">index</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>回到瀏覽器會看到，錯誤訊息變成找不到 template ，這個 template 其實就是我們在 rails 中會使用的 html.erb 檔案，也就是我們說的 view</p><p><img src="https://i.imgur.com/wkIeYE8.png"></p><h3 id="view-建立"><a href="#view-建立" class="headerlink" title="view 建立"></a>view 建立</h3><p>因為需要對應 index ，所以檔名也要跟 action 一樣，就建立一個檔案命名為 <code>index.html.erb</code> ，像這種特殊的 <code>html.erb</code> 檔案 可以同時在內部寫 html 標籤 及 ruby 的語法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>這裡是 articles 的 index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>對應到 &#x2F;articles 頁面就會看到我們建立好的標籤及內容<br><img src="https://i.imgur.com/8GGwcZA.png"></p><h2 id="如何在-view-上面看到-controller-傳遞的參數"><a href="#如何在-view-上面看到-controller-傳遞的參數" class="headerlink" title="如何在 view 上面看到 controller 傳遞的參數"></a>如何在 view 上面看到 controller 傳遞的參數</h2><p>我們可以把 action 裡面寫上 <code>render html: params</code></p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticlesController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">index</span></span><br><span class="line">    render <span class="symbol">html:</span> params</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>瀏覽器的 view 就可以接受到 action 的執行內容，要把 params 呈現在畫面上，就會看到這個 view 對應的 controller 還有 action 是什麼</p><p><img src="https://i.imgur.com/x1AH4FW.png"></p><p>如果在網址的後面加上 <code>?</code> 後面跟的那串東西會被當做參數傳進一個特別的變數叫做 <code>params</code>。這是 Rails 預先幫我們定義好的，它可以捕捉到這個頁面的資訊，然後你就會看到頁面顯示成這樣。</p><p><img src="https://i.imgur.com/jgGhFcf.png"></p><p>這會讓你在設計路徑時多帶入一些參數，讓這個頁面可以做使用。</p><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/12-controllers">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Routes (下)</title>
      <link href="/2022/10/17/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9ARoutes-%E4%B8%8B/"/>
      <url>/2022/10/17/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9ARoutes-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>延續前面基本的路徑設計，這篇會提到比較多種巢狀設計的方式。</p><h2 id="巢狀設計方式"><a href="#巢狀設計方式" class="headerlink" title="巢狀設計方式"></a>巢狀設計方式</h2><p>resources 方法裡面其實還可以在包 resources，在後面會提到 model 之間關連性，例如一個 User 可能會有很多 Articles，Route 可能會這樣寫：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:users</span> <span class="keyword">do</span></span><br><span class="line">    resource <span class="symbol">:articles</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>終端機輸入 $ rails routes -c articles 查詢路徑可以看到如下</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            Prefix Verb   <span class="variable constant_">URI</span> Pattern                             Controller<span class="comment">#Action</span></span><br><span class="line"> new_user_articles <span class="variable constant_">GET</span>    /users/<span class="symbol">:user_id/articles/new</span>(.<span class="symbol">:format</span>)  articles<span class="comment">#new</span></span><br><span class="line">edit_user_articles <span class="variable constant_">GET</span>    /users/<span class="symbol">:user_id/articles/edit</span>(.<span class="symbol">:format</span>) articles<span class="comment">#edit</span></span><br><span class="line">     user_articles <span class="variable constant_">GET</span>    /users/<span class="symbol">:user_id/articles</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#show</span></span><br><span class="line">                   <span class="variable constant_">PATCH</span>  /users/<span class="symbol">:user_id/articles</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">PUT</span>    /users/<span class="symbol">:user_id/articles</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">DELETE</span> /users/<span class="symbol">:user_id/articles</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#destroy</span></span><br><span class="line">                   <span class="variable constant_">POST</span>   /users/<span class="symbol">:user_id/articles</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#create</span></span><br></pre></td></tr></table></figure><p>路徑內就包含特定”使用者”與”文章”之間的關係，像是：<br>&#x2F;users&#x2F;1&#x2F;articles&#x2F;new &#x3D;&gt; 使用者 1 號的空間新增文章<br>&#x2F;users&#x2F;2&#x2F;articles&#x2F;3&#x2F;edit &#x3D;&gt; 使用者 2 號的空間對 3 號文章做修改</p><p>你也可以繼續往下包 resources，但是建議是 2 層最多，在下去可能變得太冗長，像是這樣：<br>&#x2F;users&#x2F;Sean&#x2F;articles&#x2F;6&#x2F;comments&#x2F;3</p><h3 id="Shallow"><a href="#Shallow" class="headerlink" title="Shallow"></a>Shallow</h3><p>會使用到這個簡化方法主要是在一些 action 不需要用到上一層資源相關的 id 我們可以透過 <code>shallow</code> 去設計<br>像是下面這樣的狀況，要呈現留言板在文章內，index, new, create 這 3 種需要知道是針對哪篇文章進行留言或顯示所有留言，所以會要保留 article id，但是在 show, edit, update, destroy，不需要知道 article id，只要針對 comment id 就可以進行相關動作。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:articles</span> <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:comments</span>, <span class="symbol">only:</span> [<span class="symbol">:index</span>, <span class="symbol">:new</span>, <span class="symbol">:create</span>] <span class="comment"># 這3種 action 需要標出 article id</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">resources <span class="symbol">:comments</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>] <span class="comment"># 這些不需要標出 article id</span></span><br></pre></td></tr></table></figure><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">             Prefix Verb   <span class="variable constant_">URI</span> Pattern                                  Controller<span class="comment">#Action</span></span><br><span class="line">   article_comments <span class="variable constant_">GET</span>    /articles/<span class="symbol">:article_id/comments</span>(.<span class="symbol">:format</span>)     comments<span class="comment">#index</span></span><br><span class="line">                    <span class="variable constant_">POST</span>   /articles/<span class="symbol">:article_id/comments</span>(.<span class="symbol">:format</span>)     comments<span class="comment">#create</span></span><br><span class="line">new_article_comment <span class="variable constant_">GET</span>    /articles/<span class="symbol">:article_id/comments/new</span>(.<span class="symbol">:format</span>) comments<span class="comment">#new</span></span><br><span class="line">       edit_comment <span class="variable constant_">GET</span>    /comments/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>)                 comments<span class="comment">#edit</span></span><br><span class="line">            comment <span class="variable constant_">GET</span>    /comments/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)                      comments<span class="comment">#show</span></span><br><span class="line">                    <span class="variable constant_">PATCH</span>  /comments/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)                      comments<span class="comment">#update</span></span><br><span class="line">                    <span class="variable constant_">PUT</span>    /comments/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)                      comments<span class="comment">#update</span></span><br><span class="line">                    <span class="variable constant_">DELETE</span> /comments/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)                      comments<span class="comment">#destroy</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的寫法可以利用 shallow 來簡化如下，產生出來的路徑都是相同。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resources <span class="symbol">:articles</span> <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:comments</span>, <span class="symbol">shallow:</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="collection-與-member"><a href="#collection-與-member" class="headerlink" title="collection 與 member"></a>collection 與 member</h3><p>如果預設的路徑不夠使用，且層層包裹之中，又希望設計要或不要帶有前面一層的 id 可以這樣表示<br><code>collection</code> &#x3D;&gt; 沒有 id<br><code>member</code> &#x3D;&gt; 有 id</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:friends</span> <span class="keyword">do</span></span><br><span class="line">    collection <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># /friends/confirmed</span></span><br><span class="line">      get <span class="symbol">:confirmed</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    member <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># /friends/:id/status</span></span><br><span class="line">      post <span class="symbol">:status</span></span><br><span class="line">      <span class="comment"># /friends/:id/</span></span><br><span class="line">      delete <span class="symbol">:destroy</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>對應路徑如下：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">           Prefix Verb   <span class="variable constant_">URI</span> Pattern                   Controller<span class="comment">#Action</span></span><br><span class="line">confirmed_friends <span class="variable constant_">GET</span>    /friends/confirmed(.<span class="symbol">:format</span>)  friends<span class="comment">#confirmed</span></span><br><span class="line">    status_friend <span class="variable constant_">POST</span>   /friends/<span class="symbol">:id/status</span>(.<span class="symbol">:format</span>) friends<span class="comment">#status</span></span><br><span class="line">           friend <span class="variable constant_">DELETE</span> /friends/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)        friends<span class="comment">#destroy</span></span><br><span class="line">          friends <span class="variable constant_">GET</span>    /friends(.<span class="symbol">:format</span>)            friends<span class="comment">#index</span></span><br><span class="line">                  <span class="variable constant_">POST</span>   /friends(.<span class="symbol">:format</span>)            friends<span class="comment">#create</span></span><br><span class="line">       new_friend <span class="variable constant_">GET</span>    /friends/new(.<span class="symbol">:format</span>)        friends<span class="comment">#new</span></span><br><span class="line">      edit_friend <span class="variable constant_">GET</span>    /friends/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>)   friends<span class="comment">#edit</span></span><br><span class="line">                  <span class="variable constant_">GET</span>    /friends/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)        friends<span class="comment">#show</span></span><br><span class="line">                  <span class="variable constant_">PATCH</span>  /friends/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)        friends<span class="comment">#update</span></span><br><span class="line">                  <span class="variable constant_">PUT</span>    /friends/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)        friends<span class="comment">#update</span></span><br><span class="line">                  <span class="variable constant_">DELETE</span> /friends/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)        friends<span class="comment">#destroy</span></span><br></pre></td></tr></table></figure><h3 id="namespace-與-scope"><a href="#namespace-與-scope" class="headerlink" title="namespace 與 scope"></a>namespace 與 scope</h3><p>namespace &#x3D;&gt; 會讓後面指定的資源除了加到路徑上之外也多加到 prefix 及 controller 的名稱上<br>scope &#x3D;&gt; 只有將資源加到路徑</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  namespace <span class="symbol">:users</span> <span class="keyword">do</span></span><br><span class="line">    resources <span class="symbol">:articles</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  scope <span class="symbol">:users</span> <span class="keyword">do</span></span><br><span class="line">    resources <span class="symbol">:articles</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>產生路徑如下，可以看到兩種的差異在於用 namespace 的會影響到 prefix 及 controller 的設計，如果有這樣需求的就可以這樣使用，路徑是都一樣的。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># namespace</span></span><br><span class="line">            Prefix Verb   <span class="variable constant_">URI</span> Pattern                        Controller<span class="comment">#Action</span></span><br><span class="line">    users_articles <span class="variable constant_">GET</span>    /users/articles(.<span class="symbol">:format</span>)          users/articles<span class="comment">#index</span></span><br><span class="line">                   <span class="variable constant_">POST</span>   /users/articles(.<span class="symbol">:format</span>)          users/articles<span class="comment">#create</span></span><br><span class="line"> new_users_article <span class="variable constant_">GET</span>    /users/articles/new(.<span class="symbol">:format</span>)      users/articles<span class="comment">#new</span></span><br><span class="line">edit_users_article <span class="variable constant_">GET</span>    /users/articles/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>) users/articles<span class="comment">#edit</span></span><br><span class="line">     users_article <span class="variable constant_">GET</span>    /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      users/articles<span class="comment">#show</span></span><br><span class="line">                   <span class="variable constant_">PATCH</span>  /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      users/articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">PUT</span>    /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      users/articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">DELETE</span> /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      users/articles<span class="comment">#destroy</span></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># scope</span></span><br><span class="line">            Prefix Verb   <span class="variable constant_">URI</span> Pattern                        Controller<span class="comment">#Action</span></span><br><span class="line">          articles <span class="variable constant_">GET</span>    /users/articles(.<span class="symbol">:format</span>)          articles<span class="comment">#index</span></span><br><span class="line">                   <span class="variable constant_">POST</span>   /users/articles(.<span class="symbol">:format</span>)          articles<span class="comment">#create</span></span><br><span class="line">       new_article <span class="variable constant_">GET</span>    /users/articles/new(.<span class="symbol">:format</span>)      articles<span class="comment">#new</span></span><br><span class="line">      edit_article <span class="variable constant_">GET</span>    /users/articles/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>) articles<span class="comment">#edit</span></span><br><span class="line">           article <span class="variable constant_">GET</span>    /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#show</span></span><br><span class="line">                   <span class="variable constant_">PATCH</span>  /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">PUT</span>    /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">                   <span class="variable constant_">DELETE</span> /users/articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#destroy</span></span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/11-routes">為你自己學 Ruby on Rails</a></li><li><a href="https://rails.ruby.tw/routing.html">Rails Guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：Routes (上)</title>
      <link href="/2022/10/14/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9ARoutes-%E4%B8%8A/"/>
      <url>/2022/10/14/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9ARoutes-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>前面 MVC 中德概念有提到 Restful Routes 設計很重要，今天就來簡單講一下基本的路徑 Routes 設定吧！</p></div><h2 id="路徑設定位置"><a href="#路徑設定位置" class="headerlink" title="路徑設定位置"></a>路徑設定位置</h2><p>通常我們會在 config&#x2F;routes.rb 的檔案裡面進行路徑的設定：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  get <span class="string">&quot;/&quot;</span>, <span class="symbol">to:</span> <span class="string">&quot;pages#index&quot;</span> ＃去首頁</span><br><span class="line">  get <span class="string">&quot;/about&quot;</span>, <span class="symbol">to:</span> <span class="string">&quot;pages#about&quot;</span> ＃去關於我們的頁面</span><br><span class="line">  ＃ 動作 “路徑”, <span class="symbol">to:</span> <span class="string">&quot;controller#action&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>一般設定就如上面這樣，會先指定動作，再來是要去的路徑，接著是對應的 controller，”＃”後面是 controller 上面的 action。</p><h2 id="用-resources-產生的-Routes"><a href="#用-resources-產生的-Routes" class="headerlink" title="用 resources 產生的 Routes"></a>用 resources 產生的 Routes</h2><p>這邊可以感受到慣例優於設定的一個小地方，使用 Rails 提供的 resources 方法非常方便，可以自動產生出對應的 8 條路徑、7 種 action，可以應付一般 restful routes 設計</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:articles</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以開啟終端機輸入 <code>rails routes -c articles</code><br>就會看到對應出來下面的這些路徑</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rails routes -c articles</span><br><span class="line">   Prefix    Verb   <span class="variable constant_">URI</span> Pattern                  Controller<span class="comment">#Action</span></span><br><span class="line">    articles <span class="variable constant_">GET</span>    /articles(.<span class="symbol">:format</span>)          articles<span class="comment">#index</span></span><br><span class="line">             <span class="variable constant_">POST</span>   /articles(.<span class="symbol">:format</span>)          articles<span class="comment">#create</span></span><br><span class="line"> new_article <span class="variable constant_">GET</span>    /articles/new(.<span class="symbol">:format</span>)      articles<span class="comment">#new</span></span><br><span class="line">edit_article <span class="variable constant_">GET</span>    /articles/<span class="symbol">:id/edit</span>(.<span class="symbol">:format</span>) articles<span class="comment">#edit</span></span><br><span class="line">     article <span class="variable constant_">GET</span>    /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#show</span></span><br><span class="line">             <span class="variable constant_">PATCH</span>  /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">             <span class="variable constant_">PUT</span>    /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">             <span class="variable constant_">DELETE</span> /articles/<span class="symbol">:id</span>(.<span class="symbol">:format</span>)      articles<span class="comment">#destroy</span></span><br></pre></td></tr></table></figure><p>可以注意到我們這些路徑預設的 action 都是有意義的，一般來說會如下面的設計：</p><ul><li>index &#x3D;&gt; get，首頁或列表頁，通常會是呈現所有資料的頁面，以文章來說可能就像是部落格的文章列表，或是一些論壇的文章列表頁</li><li>create &#x3D;&gt; post，為新增文章的位置，不會看到畫面，但是用 post 動作更新資料</li><li>new &#x3D;&gt; get，為新增的表單頁面，填入跟文章相關的資料，按下送出就會觸發 create</li><li>edit &#x3D;&gt; get，為編輯的表單頁面</li><li>show &#x3D;&gt; get，為顯示文章內容的頁面</li><li>update &#x3D;&gt; patch and put，為更新的位置，不會看到畫面，用 patch 或 put (對瀏覽器來說同樣為 post)</li><li>destroy ＝&gt; delete，為刪除文章的位置，同樣不看到畫面，用 delete 方法 (同樣為 post 的一種)</li></ul><h3 id="prefix-是？"><a href="#prefix-是？" class="headerlink" title="prefix 是？"></a>prefix 是？</h3><p>後面可以接上 <code>_path</code> 或 <code>_url</code> 後變成「相對應的路徑或網址」的 View Helper（幫忙 view 呈現資料的方法）。如果是站內連結，通常會使用 _path 寫法來產生站內的路徑，例如：</p><p>articles + path &#x3D; articles_path &#x3D;&gt; &#x2F;articles<br>new_article + path &#x3D; new_article_path &#x3D;&gt; &#x2F;articles&#x2F;new<br>edit_article + path &#x3D; edit_article_path(5) &#x3D;&gt; &#x2F;articles&#x2F;5&#x2F;edit</p><p>如果是使用 _url 則會產生完整的路徑，包括主機網域名稱：</p><p>articles + url &#x3D; articles_url &#x3D;&gt; <a href="http://sean_blog.com/articles">http://sean_blog.com/articles</a><br>new_article + url &#x3D; new_article_url &#x3D;&gt; <a href="http://sean_blog.com/articles/new">http://sean_blog.com/articles/new</a><br>edit_article + url &#x3D; edit_article_url(5) &#x3D;&gt; <a href="http://sean_blog.com/articles/5/edit">http://sean_blog.com/articles/5/edit</a></p><h3 id="如果用不到那麼多種方法"><a href="#如果用不到那麼多種方法" class="headerlink" title="如果用不到那麼多種方法"></a>如果用不到那麼多種方法</h3><p>假設我們只需要用到 index 跟 show 呢?<br>可以使用 <code>only</code> 或 <code>except</code> ，only 是正向表示，表示內有的方法都要; except 反向表示除了提到的方法之外都要</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:articles</span>, <span class="symbol">only:</span>[<span class="symbol">:index</span>, <span class="symbol">:show</span>]</span><br><span class="line">  resources <span class="symbol">:articles</span>, <span class="symbol">except:</span>[<span class="symbol">:new</span>, <span class="symbol">:create</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="resource-用單數會"><a href="#resource-用單數會" class="headerlink" title="resource 用單數會?"></a>resource 用單數會?</h3><p>如果用單數<code>resource</code>方法會<strong>產生沒有 id 的路徑</strong>，如果沒有要表示特定文章路徑就可以用這樣去產生，然後可以搭配 only 或 except 去選出那些路徑要用。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resource <span class="symbol">:articles</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rails routes -c articles</span><br><span class="line">      Prefix Verb   <span class="variable constant_">URI</span> Pattern              Controller<span class="comment">#Action</span></span><br><span class="line"> new_articles <span class="variable constant_">GET</span>    /articles/new(.<span class="symbol">:format</span>)  articles<span class="comment">#new</span></span><br><span class="line">edit_articles <span class="variable constant_">GET</span>    /articles/edit(.<span class="symbol">:format</span>) articles<span class="comment">#edit</span></span><br><span class="line">     articles <span class="variable constant_">GET</span>    /articles(.<span class="symbol">:format</span>)      articles<span class="comment">#show</span></span><br><span class="line">              <span class="variable constant_">PATCH</span>  /articles(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">              <span class="variable constant_">PUT</span>    /articles(.<span class="symbol">:format</span>)      articles<span class="comment">#update</span></span><br><span class="line">              <span class="variable constant_">DELETE</span> /articles(.<span class="symbol">:format</span>)      articles<span class="comment">#destroy</span></span><br><span class="line">              <span class="variable constant_">POST</span>   /articles(.<span class="symbol">:format</span>)      articles<span class="comment">#create</span></span><br></pre></td></tr></table></figure><p>下一篇再提供多一些關於路徑的設定部分給大家。</p><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/11-routes">為你自己學 Ruby on Rails</a></li><li><a href="https://rails.ruby.tw/routing.html">Rails Guide</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Rails世界必須懂：MVC 是甚麼?</title>
      <link href="/2022/10/13/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AMVC%20%E6%98%AF%E7%94%9A%E9%BA%BC/"/>
      <url>/2022/10/13/Rails/%E9%80%B2%E5%85%A5Rails%E4%B8%96%E7%95%8C%E5%BF%85%E9%A0%88%E6%87%82%EF%BC%9AMVC%20%E6%98%AF%E7%94%9A%E9%BA%BC/</url>
      
        <content type="html"><![CDATA[<p>最近開始進行一些面試，真的深刻感受到這個問題的重要，算是寫 rails 根本的概念了吧，應該有接觸後端框架或是網業開發必備的設計概念，今天也被面試官問到，如果要跟沒程式經驗的小白解釋的話要怎麼說明，所以就打算用個淺顯易懂的方式來說明觀念吧!!</p><h2 id="白話文來解釋-MVC"><a href="#白話文來解釋-MVC" class="headerlink" title="白話文來解釋 MVC"></a>白話文來解釋 MVC</h2><p>最近大家好像都開始蠢蠢動，因為防疫限制的鬆綁所以紛紛開始出國，就拿我們辦個護照的例子來說明好啦。<br>先想像一下，今天你走進去外交部領事事務局，因為初來乍到所以不熟悉這邊的行政單位在哪，就找了一樓<code>服務台的阿姨</code>問了一下辦理護照需要去哪邊?</p><p>阿姨告訴你說請到 <code>3 樓</code>的<code>申辦櫃台</code>去進行辦理，於是你走到 3 樓，找到櫃檯跟他說你要辦理護照，他請你填寫一些基本資料，並且附上對應的照片等等，然後就幫你把你的資料送到收件的地方並且<code>核對你的資料</code>，後續根據你的相關紀錄，確認都有符合辦理的條件後，就把製作好的<code>護照</code>交給你手上。</p><p>其實剛剛很生活的例子就完全解釋了我們整個 mvc 的運作架構，接下來一一說明一下吧。</p><h2 id="白話之後也對應網頁運作"><a href="#白話之後也對應網頁運作" class="headerlink" title="白話之後也對應網頁運作"></a>白話之後也對應網頁運作</h2><p>上邊特別標註的一些名詞其實都是對應我們 MVC 的一些概念喔，像是服務台阿姨其實扮演著 <code>Route</code> 的角色，就是表示當使用者點下或輸入特定網址，Route 就告訴你的瀏覽器要把你導向甚麼位置，這個位置是 3 樓，也就是 <code>Controller</code> 的部分，Controller 上面會帶有很多 <code>Action</code>，每個都是一種特殊的方法，可以表示不同行政的櫃檯 (有辦護照、申請移民、申請居留等等)，把你的資料透過 Action 送到收件處，就是 <code>Model</code> 去進行比對，幫你跟資料庫進行溝通，透過 SQL 語法和資料庫溝通，資料庫確定你的身分，也比對過後沒問題，就找到對應的資料放到護照上交還給辦理櫃檯，然後再交到你手上，護照就是表示需要呈現的資料，也就是把資料放到瀏覽器上面呈現給你看到，等於就是透過 Controller 的 Action 交給 View 去呈現，View 可以想像就是你看到完整受到核可的護照摟。</p><p>完整的流程應該會是 R + MVC，前面的 R 就是 Route</p><p>Route：負責指引你要瀏覽的位置及進行的動作<br>Model：負責與資料庫溝通、將我們的指令轉換成 SQL 語法，處理資料邏輯。<br>Views：負責畫面呈現。(專業的說法是表示回傳 HTML 的方法)<br>Controller：負責處理傳進來的資料流向、流程控制。</p><h2 id="為什麼使用-MVC"><a href="#為什麼使用-MVC" class="headerlink" title="為什麼使用 MVC?"></a>為什麼使用 MVC?</h2><p>MVC 的目的就是<strong>分工</strong>，使用 MVC 架構的好處，在於這三者彼此獨立、各司其職，方便團隊進行開發，使程式碼更易於維護，「把不同意義的程式碼放在不同的檔案裡」。如果需要前後端分離，後端工程師可以專注於 Controller 及 Model 的部分，View 相關呈現就可以交給前端工程師去處理。</p><p>附上我之前課程上畫的醜醜圖片來幫大家簡單釐清概念<br><img src="https://i.imgur.com/hf9CtBC.png"></p><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/10-mvc">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：模組 Module</title>
      <link href="/2022/10/12/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E6%A8%A1%E7%B5%84-Module/"/>
      <url>/2022/10/12/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E6%A8%A1%E7%B5%84-Module/</url>
      
        <content type="html"><![CDATA[<p>這篇就來好好了解一下 Ruby 中的模組吧，先來用個我最愛的超級英雄蜘蛛人當成例子<br>以前面人類類別的例子，我希望他可以有吐絲的能力來當蜘蛛人，可能會想用以下這些做法：</p><ol><li>建立一個蜘蛛類別並且帶有吐絲功能，然後再叫人類類別去繼承</li><li>在人類類別裡面定義一個吐絲功能</li></ol><p>第 1 種的方式感覺在邏輯上比較奇怪，人為了吐絲就要去繼承蜘蛛，感覺就跟原本設定的類別有點衝突；第 2 種是直接寫在內部確實也可以達到同樣效果，但如果其他類別也需要用到這項能力就要另外在寫，沒辦法抽出來共用。</p><p>如果我們能夠把這些超級能力抽出來，需要使用再引入，不是很好嗎?<br>於是就有了模組的概念可以來解決這樣的狀況!</p><h2 id="模組定義與使用"><a href="#模組定義與使用" class="headerlink" title="模組定義與使用"></a>模組定義與使用</h2><p>module 後面接上模組名稱，命名規則與 class 相同，使用駝峰大寫，下面就可以定義內部要有的方法。<br>如果在其他類別內要引用就使用 <code>include</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定義吐司模組</span></span><br><span class="line"><span class="keyword">module</span> spinning</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">spin</span></span><br><span class="line">    puts <span class="string">&quot;我會吐絲啦!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入模組到人類類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">include</span> spinning <span class="comment"># 引入吐絲模組</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Sean = Human.new</span><br><span class="line">Sean.spinning <span class="comment"># 我會吐絲啦!</span></span><br></pre></td></tr></table></figure><p>在類別中引入模組就可以讓新建立的實體 Sean 直接可以使用模組內的方法了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span></span><br><span class="line">  <span class="keyword">include</span> spinning</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果建立一個狗類別也想要使用只要引入他也可以有這項能力。</p><h2 id="類別和模組的差別"><a href="#類別和模組的差別" class="headerlink" title="類別和模組的差別?"></a>類別和模組的差別?</h2><p>在 Ruby 裡，<strong>「類別」的上層類別就是「模組」</strong>。<br>可以進入 irb 透過 supercalss 來看到 Class 的上層就是 Module</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">3.1.2 :001 &gt;</span> Class.superclass</span><br><span class="line"> =&gt; Module</span><br></pre></td></tr></table></figure><p>比較兩者的差異：<br>在 irb 中類別及模組後面加上.instance_methods，就可以查到所有內部具有的實體方法，將兩者相減可以知道差異</p><figure class="highlight irb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">3.1.2 :002 &gt;</span> Class.instance_methods - Module.instance_methods</span><br><span class="line"> =&gt; [<span class="symbol">:allocate</span>, <span class="symbol">:superclass</span>, <span class="symbol">:subclasses</span>, <span class="symbol">:new</span>]</span><br></pre></td></tr></table></figure><p>下層的 Class 類別，比 Module 類別多了 4 個方法，其中 allocate 及 new 造就以下的差異：</p><ul><li>模組沒辦法 new 一個新的實體出來 (new)。</li><li>模組沒辦法繼承別的模組 (allocate)。</li></ul><h2 id="如何選擇用類別繼承還是模組？"><a href="#如何選擇用類別繼承還是模組？" class="headerlink" title="如何選擇用類別繼承還是模組？"></a>如何選擇用類別繼承還是模組？</h2><p>如果你發現你要使用功能，可能在很多不同體系的類別裡都會用得到，那你可以考慮把功能寫在模組裡，需要的時候再 include 進來。</p><hr><ol><li><a href="https://railsbook.tw/chapters/08-ruby-basic-4">為你自己學 Ruby on Rails</a></li><li><a href="https://pjchender.dev/ruby-on-rails/ruby-object/">[Ruby] 物件（object）、類別（class）和模組（module）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：類別 Class</title>
      <link href="/2022/10/09/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E9%A1%9E%E5%88%A5-Class/"/>
      <url>/2022/10/09/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E9%A1%9E%E5%88%A5-Class/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>上一篇文章簡單介紹物件導向 (OOP) 的設計模式，也稍微開個頭提到 Ruby 中的物件部分，有提到這句話：<strong>「Ruby 中的物件(Object)是一個類別(Class)所製造出來的實體(Instance)。」</strong>，也舉了例子表示物件由類別所產生出來。可以把類別想像成模具，而物件就是透過模具所刻印出來的實體。今天就來好好說明這個例子要表達的概念是甚麼，而類別又是甚麼吧。</p></div><h2 id="類別-Class"><a href="#類別-Class" class="headerlink" title="類別 Class"></a>類別 Class</h2><p>類別中可以放置很多方法跟屬性，大家應該從前面對於物件導向的介紹中有看到，這些都寫在類別中。開始寫 rails 之後更是會注意到 Model 及 Controller 都是由 class 構築而成，且繼承自更上層的類別，這部分後面進入到 rails 的介紹會再有更多的說明。</p><h3 id="定義類別"><a href="#定義類別" class="headerlink" title="定義類別"></a>定義類別</h3><p>慣例上來說 class 會以大駝峰的方式來命名（CamelCase），例如 SayHello、PostsController、User。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 類別的名字</span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Human類別中定義一個eat方法，可以代入food作為參數</span></span><br><span class="line"></span><br><span class="line">Sean = <span class="title class_">Human</span>.new <span class="comment"># 建立實體</span></span><br><span class="line">Sean.eat <span class="string">&quot;咖哩&quot;</span>  <span class="comment">#=&gt; 印出「咖哩也太好吃了吧!!」</span></span><br><span class="line"></span><br><span class="line">Rex = Human.new</span><br><span class="line">Rex.eat <span class="string">&quot;麥當勞&quot;</span>  <span class="comment">#=&gt; 印出「麥當勞也太好吃了吧!!」</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 Human 類別建立出 Sean 和 Rex 的實體，因為這兩個實體都是從 Human 中產生，所以都可以使用 eat 的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初始化-initialize"><a href="#初始化-initialize" class="headerlink" title="初始化 (initialize)"></a>初始化 (initialize)</h3><p>在使用 new 方法製作實體的時候，也可以順便傳參數進去，讓實體一建立就帶有相關的參數。</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name, gender</span>)</span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">    <span class="variable">@gender</span> = gender</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">    puts <span class="string">&quot;hello, my name is <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Sean = <span class="title class_">Human</span>.new(<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line">Sean.say_hello    <span class="comment"># =&gt; hello, my name is Sean</span></span><br></pre></td></tr></table></figure><p>如果要透過 new 方法傳參數進來，在類別裡面必須有個名為 initialize 的方法來接收傳進來的參數。在 initialize 方法裡，常見的手法是會把參數傳進來給內部的實體變數（instance variable）。</p><h3 id="實體變數-instance-variable"><a href="#實體變數-instance-variable" class="headerlink" title="實體變數 instance variable"></a>實體變數 instance variable</h3><p>類別內會建立實體，就會使用到實體變數，用 @ 開頭的變數，<strong>是活在每個實體裡的變數，而且每個實體之間互不相影響。</strong><br>在 Rails 專案中，實體變數應用到的頻率很高，最常用的地方應該是 Controller 與 View 之間，會透過實體變數去進行傳遞資料。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">index</span></span><br><span class="line">    <span class="variable">@users</span> = User.all <span class="comment"># 取得所有的user的資料，並放入<span class="doctag">@user</span>這個實體變數</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="實體方法-instance-method"><a href="#實體方法-instance-method" class="headerlink" title="實體方法 (instance method)"></a>實體方法 (instance method)</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="類別方法-class-method"><a href="#類別方法-class-method" class="headerlink" title="類別方法 (class method)"></a>類別方法 (class method)</h3><p>以前面使用過的 user controller 的例子來看</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">index</span></span><br><span class="line">    <span class="variable">@users</span> = User.all    <span class="comment"># 取得所有的user的資料，並放入<span class="doctag">@user</span>這個實體變數</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這裡的 all 方法是直接作用在 User 這個「類別」上，就稱為類別方法。在 Ruby 要定義類別方法有幾種寫法，其中一種比較簡單的，就是在前面加上 self：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這樣就可以直接用 Human.all 的方式呼叫方法。下面是另一種寫法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">class</span> &lt;&lt; <span class="variable language_">self</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這樣的寫法跟前面的一樣，但這樣就不需要特別在方法前面加上 self。當一個類別裡面有很多類別方法的時候，可以選擇這樣的寫法。</p><h3 id="實體方法與類別方法比較"><a href="#實體方法與類別方法比較" class="headerlink" title="實體方法與類別方法比較"></a>實體方法與類別方法比較</h3><p>實體方法與類別方法的差異為作用的對象不同，實體方法是作用在實體上，而類別方法是作用在類別上。在 Ruby 中定義的方式也不同，定義類別方法則需要以 <code>self</code> 開頭或使用 <code>class &lt;&lt; self</code> 裡面再定義方法，而實體方法則不用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name</span>)</span><br><span class="line">    <span class="variable">@name</span> = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">my_name</span></span><br><span class="line">    puts <span class="string">&quot;I&#x27;m <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>.&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.say_hi</span><br><span class="line">    puts <span class="string">&quot;hi 我是類別方法&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Sean = <span class="title class_">Human</span>.new(<span class="string">&#x27;Sean&#x27;</span>)</span><br><span class="line">麥克 = <span class="title class_">Human</span>.new(<span class="string">&#x27;麥克&#x27;</span>)</span><br><span class="line"></span><br><span class="line">＃實體方法 instance method</span><br><span class="line">Sean.my_name <span class="comment"># =&gt; I&#x27;m Sean.</span></span><br><span class="line">麥克.my_name <span class="comment"># =&gt; I&#x27;m 麥克.</span></span><br><span class="line">Human.my_name <span class="comment"># =&gt; 出錯（NoMethodError）</span></span><br><span class="line"></span><br><span class="line">＃類別方法 <span class="keyword">class</span> method</span><br><span class="line">Human.say_hi <span class="comment"># =&gt; hi 我是類別方法</span></span><br><span class="line">Sean.say_hi <span class="comment"># =&gt; 出錯（NoMethodError），實體沒辦法使用</span></span><br><span class="line">麥克.say_hi <span class="comment"># =&gt; 出錯（NoMethodError），實體沒辦法使用</span></span><br></pre></td></tr></table></figure><h3 id="方法的類型與作用範圍"><a href="#方法的類型與作用範圍" class="headerlink" title="方法的類型與作用範圍"></a>方法的類型與作用範圍</h3><p>OOP 中的概念有提到一項是封裝的概念，主要可以利用一些私有方法來保護所定義的實體方法</p><ul><li>public: 就是所有區域都可以直接存取。</li><li>private: 是只有在類別內部才可以存取。</li><li>protected: 介於上述這兩者之間，比 private 寬鬆一些，但又沒有 public 那麼自由，protected 在同一個類別內，或是繼承它的子類別可以自由取用，且可以有 recevier。</li></ul><p>比較：</p><blockquote><p>三種方法都可以在 class 內部被呼叫。<br>只有 public 方法能在外部被呼叫。<br>在內部呼叫 private 方法的時候不能夠有 receiver，而 protected 方法則沒有這種限制。</p></blockquote><h3 id="繼承（inheritance）"><a href="#繼承（inheritance）" class="headerlink" title="繼承（inheritance）"></a>繼承（inheritance）</h3><p>上面都提到單一類別，如果除了人類類別外還想要再加入一個小狗類別呢?，而且都有相同的方法，我們可以利用繼承的設計，可以把程式碼整理更簡單，且不會寫出一堆重複的程式碼。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在這個例子，不管是 Human 或 Dog 類別都有定義了 eat 方法，在物件導向的概念裡，如果這些類別的用途是同一型的（例如 Human 跟 Dog 都算動物），通常會把相同功能的方法移到「上一層」的類別裡，然後再去繼承它。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span> 也太好吃了吧!!&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>創造出 Animal 類別，然後讓 Human 跟 Dog 都去繼承它，應用小於符號 &lt; 就是「繼承」。可以代表「Human 是一種 Animal， Dog 也是一種 Animal」。</p><p>類別的部分觀念真的比較複雜，還有許多觀念後續如果有更多時間會再慢慢補充給大家。</p><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/08-ruby-basic-4">為你自己學 Ruby on Rails</a></li><li><a href="https://pjchender.dev/ruby-on-rails/ruby-object/#%E7%B9%BC%E6%89%BFinheritance">[Ruby] 物件（object）、類別（class）和模組（module）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：物件導向</title>
      <link href="/2022/09/26/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/"/>
      <url>/2022/09/26/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>相信大家學習程式的道路上應該會多多少少都會碰到物件導向這個專有名詞，Ruby 這個語言也具有這樣的特性，今天就先為大家來簡單說明一下這個概念吧!!</p></div><h2 id="物件導向基本概念、"><a href="#物件導向基本概念、" class="headerlink" title="物件導向基本概念、"></a>物件導向基本概念、</h2><p>物件導向主要裡面包含了 4 大主要概念，<code>抽象化</code>、<code>封裝</code>、<code>繼承</code>、<code>多型</code></p><h3 id="抽象化-Abstraction"><a href="#抽象化-Abstraction" class="headerlink" title="抽象化(Abstraction):"></a>抽象化(Abstraction):</h3><blockquote><p>把真實世界的事物，轉化成物件的概念。把物件相關的資料抽取出來，定義成為物件的屬性(attributes) 以及方法 (methods)。</p></blockquote><p>想像成你要創造一個電腦物件，他具有可以記錄筆記、上網、玩遊戲等等的功能，把這樣的概念轉化成程式碼中，就是所謂的抽象化。可能可以用更具體的軟體功能舉例，你設計使用者，他有帳號密碼，可以建立文章、設定頭貼、加好友….等等，這一串分析你身旁某個東西的特性或外觀時，就是抽象化的動作。</p><h3 id="封裝-Encapsulation"><a href="#封裝-Encapsulation" class="headerlink" title="封裝(Encapsulation):"></a>封裝(Encapsulation):</h3><blockquote><p>封裝就是要讓使用者可以使用這個物件，但不讓使用者知道內部的邏輯。</p></blockquote><p>在 Ruby 可以對變數及方法來進行封裝：</p><ul><li>封裝變數：實體變數(@variable)及類別變數(@@viable)就是封裝在類別內部，類別外部是無法使用。</li><li>封裝方法：像是 private 或是 protected 可以把方法包起來，變成私有方法。</li></ul><h3 id="繼承-Inheritance"><a href="#繼承-Inheritance" class="headerlink" title="繼承(Inheritance):"></a>繼承(Inheritance):</h3><blockquote><p>繼承是子類別(subclass)會繼承父類別(superclass)的屬性和方法。</p></blockquote><p>想像成，像是我會滑滑板，我的小孩繼承我也學會滑滑板。</p><p>在 Ruby 中要使用繼承是用 &lt; 這個符號。<br>如果父層跟子層都有同樣的方法時，想要使用子層的方法可以在子層的方法內加上 super，<br>就可以覆蓋掉父層的方法。</p><h3 id="多型-Polymorphism"><a href="#多型-Polymorphism" class="headerlink" title="多型(Polymorphism):"></a>多型(Polymorphism):</h3><blockquote><p>定義具有不同功能但是名稱完全相同的方法或屬性的類別。<br>想像狗和貓都有「叫」的方法，但是呼叫狗的「叫」方法，狗會”旺旺”叫；呼叫貓的「叫」，貓則會”喵喵”叫。</p></blockquote><h2 id="物件概念"><a href="#物件概念" class="headerlink" title="物件概念"></a>物件概念</h2><p>物件（object） &#x3D; 狀態（state） + 行為（behavior）</p><p>可以把上面的概念套用在現實生活中，看到的動植物、人、工具、物品，都可通稱為之物件（Object）。物件會有狀態跟行為，例如狗是「黑色」、「短毛」、「年紀 3 歲」等狀態，可以進行「吃飯」、「睡覺」、「走路」等行為。</p><h2 id="Ruby-中的物件"><a href="#Ruby-中的物件" class="headerlink" title="Ruby 中的物件?"></a>Ruby 中的物件?</h2><p>Ruby 是一款物件化相當徹底的程式語言，之前的章節有提到過，在 Ruby 的世界，你看得到的所有東西幾乎都是物件，數字、字串、陣列、雜湊 等等都是一種物件。</p><p><code>Ruby中的物件(Object)是一個類別(Class)所製造出來的實體(Instance)。</code><br>物件由類別所產生出來。把類別想像成模具，而物件就是透過模具所刻印出來的實體。<br>舉例來說，可以想像一個雞蛋糕(instance)，是透過模具(class)</p><p>從同一個類別所產生出來的物件，均為各個獨立的物件，有著不同的屬性(state&#x2F;attribute)或行為(behavior&#x2F;method)，也是各個不同的實體(instance)。</p><hr><p>參考資料：</p><ol><li><a href="https://medium.com/change-or-die/ruby-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-object-oriented-programming-32034e77ac2c">Ruby 物件導向程式語言(Object Oriented Programming)</a></li><li><a href="https://www.spreered.com/ruby-object-model-1/">Ruby 的繼承鍊 (1) - 如何實踐物件導向</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10277001">Ruby 封裝 vs 繼承</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">Wiki - 物件導向程式設計</a></li><li><a href="https://railsbook.tw/chapters/08-ruby-basic-4#class">為你自己學 Ruby on Rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 物件導向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 套件操作指南，Devise (helper使用、新增欄位及驗證、i18n)</title>
      <link href="/2022/08/28/Rails/Rails%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%8CDevise%20(helper%E4%BD%BF%E7%94%A8%E3%80%81%E6%96%B0%E5%A2%9E%E6%AC%84%E4%BD%8D%E5%8F%8A%E9%A9%97%E8%AD%89%E3%80%81i18n)/"/>
      <url>/2022/08/28/Rails/Rails%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%8CDevise%20(helper%E4%BD%BF%E7%94%A8%E3%80%81%E6%96%B0%E5%A2%9E%E6%AC%84%E4%BD%8D%E5%8F%8A%E9%A9%97%E8%AD%89%E3%80%81i18n)/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>基本會員註冊登入沒問題後，剛開始大家可能會想先處理的，就是註冊的一些欄位新增與資料要寫入資料庫會碰到問題，以及個別通知訊息及標籤的 i18n 中文化等等，所以本篇會簡單提到關於 i18n 這個套件搭配 Devise 的用法</p></div><h2 id="產生-controller"><a href="#產生-controller" class="headerlink" title="產生 controller"></a>產生 controller</h2><p>套件有指令可以幫忙生出對應的 controller，如果前面建立的 model 是 User 且也是放在 devise 之下，用以下的指令並且 [scope] 改為 users，可以產生對應的 controller，每個 controller 內容有許多註解為提示這些 controller 是對應那些功能相關</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g devise:controllers [scope]</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/oB3cXYa.png"></p><ul><li>也可以針對特定目標產生相關的 controller</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate devise:controllers [scope] -c=[controller&#x27;s name]</span><br></pre></td></tr></table></figure><p>注意有提示訊息提醒要確認在 routes.rb 中設定正確路徑</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果同上用 rails g devise:controllers user</span></span><br><span class="line"><span class="comment"># 想要用上其中的 sessions controller</span></span><br><span class="line">devise_for <span class="symbol">:users</span>, <span class="symbol">controllers:</span> &#123; <span class="symbol">sessions:</span> <span class="string">&quot;users/sessions&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="Controller-filters-和-helper-使用"><a href="#Controller-filters-和-helper-使用" class="headerlink" title="Controller filters 和 helper 使用"></a>Controller filters 和 helper 使用</h2><p>Devise 提供許多好用的 helper 方法，可以讓你套用在專案中。</p><h3 id="controller-filter"><a href="#controller-filter" class="headerlink" title="controller filter"></a>controller filter</h3><p>在 controller 內可以設定 before_action 加入預設認證使用者的方法，會讓該頁面跳轉到登入頁，且需要登入後才可以進入。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">before_action <span class="symbol">:authenticate_user!</span></span><br></pre></td></tr></table></figure><h3 id="helper"><a href="#helper" class="headerlink" title="helper"></a>helper</h3><p>判斷使用者是否已經登入？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_signed_in?</span><br></pre></td></tr></table></figure><p>當使用者登入後，指出目前使用者，這個指令應該會是大家用這個套件的一個主要亮點，你可以透過關聯來連結到其他的 model，去進行資料的撈取。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_user</span><br></pre></td></tr></table></figure><p>可以在登入對應的 scope 中使用的 session</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_session</span><br></pre></td></tr></table></figure><p>當使用者登入時，devise 確認帳戶或更新密碼後，會去找 scope 的路徑。登入之後再把使用者導向設定好的地方。<br>如果自訂路徑使用 :user 的 resources，就會去 user_root_path，如果沒有設定這條路徑，就使用 root_path 為預設值，如同上一篇提到的。</p><h2 id="客製新增資料欄位及驗證-強參數使用"><a href="#客製新增資料欄位及驗證-強參數使用" class="headerlink" title="客製新增資料欄位及驗證(強參數使用)"></a>客製新增資料欄位及驗證(強參數使用)</h2><p>如同我們手刻的時候需要將資料透過強參數清洗，避免使用者在填入資料時，強制將一大包 params 惡意送入資料庫，需要經過 controller 的允許(permit)。</p><p>devise 預設註冊只有 email 和 password 可以通過，但我們通常會客製自己的欄位，例如使用者名稱、匿稱、生日、地址等等。</p><p>Devise 中有三個 action 可以允許設定的欄位通過傳到 model，<br>分別是：</p><ul><li>sign_in ( Devise::SessionsController#create )<br>只允許 authentication keys 通過(ex: email、account)</li><li>sign_up ( Devise::RegistrationsController#create )<br>只允許 authentication keys、password、password_confirmation</li><li>account_update ( Devise::RegistrationsController#update )<br>只允許 authentication keys、password、password_confirmation、 current_password</li></ul><p>使用者註冊表單再額外多加其他欄位 如 username、birthday、address，必須在 ApplicationController 設定 before_action，並定義預設方法<code>configure_permitted_parameters</code>來執行，並且設定 before action 當用到 devise 的 controller 就會觸發。</p><p>以下為懶人的單行寫法：<br>ApplicationController.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationController</span> &lt; <span class="title class_ inherited__">ActionController::Base</span></span><br><span class="line">  before_action <span class="symbol">:configure_permitted_parameters</span>, <span class="symbol">if:</span> <span class="symbol">:devise_controller?</span></span><br><span class="line"></span><br><span class="line">  protected</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">configure_permitted_parameters</span></span><br><span class="line">    devise_parameter_sanitizer.permit(<span class="symbol">:sign_up</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:birthday</span>, <span class="symbol">:address</span>])</span><br><span class="line">      <span class="comment"># ()內依序為 (action, 清洗的欄位1, 清洗的欄位2 ....)</span></span><br><span class="line">      <span class="comment"># 注意欄位要用symbol</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="可以把這個部分寫到下層負責的-controller-嗎？"><a href="#可以把這個部分寫到下層負責的-controller-嗎？" class="headerlink" title="可以把這個部分寫到下層負責的 controller 嗎？"></a>可以把這個部分寫到下層負責的 controller 嗎？</h4><p>答案是可以，我一開始也覺得很奇怪，通常不該寫到最上層的地方，嘗試改動移到下面 registrations_controller 裡面，一直沒能成功，後來發現要使用到套件產生的 controller，或是其他你自己想用的 controller，需要先在路徑中指出你是用哪個 controller 來管理資料 (同前產生 controller 提示訊息提到)，需要在 <code>devise_for :users</code> 後面加上你要使用的 controller</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devise_for <span class="symbol">:users</span>, <span class="symbol">controllers:</span> &#123; <span class="symbol">registrations:</span> <span class="string">&#x27;users/registrations&#x27;</span>  &#125;</span><br></pre></td></tr></table></figure><p>再把相關的清洗設定移到裡面</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app/controller/users/registrations_controller.rb</span><br><span class="line"><span class="keyword">module</span> Users</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">RegistrationsController</span> &lt; <span class="title class_ inherited__">Devise::RegistrationsController</span></span><br><span class="line">    before_action <span class="symbol">:configure_sign_up_params</span>, <span class="symbol">only:</span> [<span class="symbol">:create</span>]</span><br><span class="line">    before_action <span class="symbol">:configure_account_update_params</span>, <span class="symbol">only:</span> [<span class="symbol">:update</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">configure_sign_up_params</span></span><br><span class="line">      devise_parameter_sanitizer.permit(<span class="symbol">:sign_up</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:birthday</span>, <span class="symbol">:address</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">configure_account_update_params</span></span><br><span class="line">      devise_parameter_sanitizer.permit(<span class="symbol">:account_update</span>, <span class="symbol">keys:</span> [<span class="symbol">:username</span>, <span class="symbol">:birthday</span>, <span class="symbol">:address</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="I18N-套件使用"><a href="#I18N-套件使用" class="headerlink" title="I18N 套件使用"></a>I18N 套件使用</h2><h3 id="i18n-安裝"><a href="#i18n-安裝" class="headerlink" title="i18n 安裝"></a>i18n 安裝</h3><ol><li><p>在 Gemfile 加上 gem “rails-i18n”，然後執行 bundle</p></li><li><p>修改 config&#x2F;application.rb 的預設語系：<br>預設應該是 en，就是英文語系，要使用中文可以改為 zh-TW</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.i18n.default_locale = <span class="string">&quot;zh-TW&quot;</span></span><br></pre></td></tr></table></figure><h3 id="調整訊息"><a href="#調整訊息" class="headerlink" title="調整訊息"></a>調整訊息</h3><p><a href="https://github.com/heartcombo/devise/wiki/I18n">github 上提供各語系 yml 原始碼</a></p><p><a href="https://github.com/tigrish/devise-i18n/blob/master/rails/locales/zh-TW.yml">i18n 使用檔案 zh-TW.yml</a><br>devise 或 i18n-devise github 上已經有許多善心人士提供對應的翻譯檔案。<br>在 config&#x2F;locale 中找到原本的 en 檔案，如果要中文翻譯，上面設定預設語系後加入<code>zh-TW.yml</code>檔案就可以。</p><h2 id="調整密碼長度驗證"><a href="#調整密碼長度驗證" class="headerlink" title="調整密碼長度驗證"></a>調整密碼長度驗證</h2><ol><li>針對全區的會員密碼設定<br>config&#x2F;initializers&#x2F;devise.rb 裡面有針對密碼寫入長度設定，可以設定為自己想要的，預設是 6~128 碼。</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.password_length = <span class="number">6</span>..<span class="number">128</span> <span class="comment"># 可以自己調整</span></span><br></pre></td></tr></table></figure><p>調整後包含前面註冊時預設的顯示都會變更，可以回去看一下 view 的檔案預設產生提示字樣的寫法，自行決定是否也要跟著顯示<br><img src="https://i.imgur.com/BggSAxF.png"></p><ol start="2"><li>針對個別 model 有需要密碼設定的設定驗證<br>可以自行加入下面驗證設定</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devise <span class="symbol">:database_authenticatable</span>, <span class="symbol">:validatable</span>, <span class="symbol">password_length:</span> <span class="number">10</span>..<span class="number">128</span></span><br></pre></td></tr></table></figure><h2 id="關於註冊及忘記密碼頁面重新整理會出錯"><a href="#關於註冊及忘記密碼頁面重新整理會出錯" class="headerlink" title="關於註冊及忘記密碼頁面重新整理會出錯"></a>關於註冊及忘記密碼頁面重新整理會出錯</h2><p>似乎是這個套件存在的問題，主要是沒有&#x2F;users 這個路徑。<br>目前根據找到的一些解法，是針對路徑修正，強制將路徑導回註冊或登入頁面</p><p><a href="https://github.com/heartcombo/devise/issues/4573">參考資料</a></p><p>路徑 config&#x2F;routes.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devise_scope <span class="symbol">:user</span> <span class="keyword">do</span></span><br><span class="line">  get <span class="string">&#x27;/users&#x27;</span>, <span class="symbol">to:</span> <span class="string">&#x27;devise/registrations#new&#x27;</span></span><br><span class="line">  get <span class="string">&#x27;/users/password&#x27;</span>, <span class="symbol">to:</span> <span class="string">&#x27;devise/passwords#new&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ol><li><a href="https://github.com/heartcombo/devise#configuring-models">devise - github</a></li><li><a href="https://andyyou.github.io/2015/04/04/devise/">Devise 快速上手</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails套件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> Devise </tag>
            
            <tag> 套件 </tag>
            
            <tag> 會員系統 </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 套件操作，Devise (安裝及基本設置)</title>
      <link href="/2022/08/27/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%20%E5%AE%89%E8%A3%9D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%A8%AD%E7%BD%AE/"/>
      <url>/2022/08/27/Rails/Rails-%E5%A5%97%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%8CDevise%20%E5%AE%89%E8%A3%9D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%A8%AD%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>進入 ruby 世界之後，無非就是希望可以使用 rails 框架來幫助你達到快速及 RESTful 的開發方式，在 rails 世界其實擁有許多強力的裝備，可以幫你擊退沿路的困難，就是我們所謂的套件 (packages)。</p><p>想當初學習自製登入系統真的有點辛苦呢，但 rails 中其實有厲害套件 Devise 可以幫你完成喔，但要能客製化出自己想要的東西也不是很容易的事情呢! 就先來針對基本的使用及客製方式好好來了解一下吧。</p></div><h2 id="Devise-可以做什麼？"><a href="#Devise-可以做什麼？" class="headerlink" title="Devise 可以做什麼？"></a>Devise 可以做什麼？</h2><p><a href="https://rubygems.org/gems/devise/versions/4.2.0?locale=zh-TW">rubygems 介紹</a><br>這是一個很強大的會員系統建置套件，你可以看到下載次數破億就知道這套間多熱門了吧。<br>大部分會用到的就是基本的會員資料建立，他可以幫你做好資料庫密碼的加密 (salting)，多數會拿來用的就是進行註冊登入的認證，讓一些區域透過認證的方法判斷是否有登入，限制特定功能的使用。其實可以用到的功能非常非常多，可以進到 github 看官方手冊介紹。</p><p>主要會用到的功能：</p><ul><li>註冊&#x2F;登入</li><li>第三方登入註冊串接</li><li>註冊登入驗證</li><li>忘記密碼、修改密碼</li><li>密碼改動及會員認證信</li></ul><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><blockquote><p><a href="https://github.com/heartcombo/devise/">原始 Devise github</a></p></blockquote><ol><li>放到 gemfile 然後 bundle 進行安裝</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &#x27;devise&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>產生 devise 設定檔<br>這邊將我們的 rails 專案導入 devise 的相關資料</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate devise:install</span><br></pre></td></tr></table></figure><h3 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置"></a>基本設置</h3><ol><li>設定寄信的 mailer 預設 url 位置</li></ol><ul><li><strong>開發階段 development：</strong><br>設置為 localhose:3000 的位置<br>config&#x2F;environments&#x2F;development.rb</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.action_mailer.default_url_options = &#123; <span class="symbol">host:</span> <span class="string">&#x27;localhost&#x27;</span>, <span class="symbol">port:</span> <span class="number">3000</span> &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>上線階段 production：</strong><br>上線後可以將位置改為實際部屬位置</li></ul><ol start="2"><li>設置首頁位置 routes<br>加入 root 確定登入或是相關操作跳轉回去的位置<br>config&#x2F;routes.rb</li></ol><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root <span class="symbol">to:</span> <span class="string">&quot;home#index&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通知訊息設定，notice 及 alert<br>預設已經寫好很多 notice 及 alert，application.htnl.erb 中有加入就可以看到。<br>app&#x2F;views&#x2F;layouts&#x2F;application.html.erb.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;notice&quot;</span>&gt;</span>&lt;%= notice %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>&lt;%= alert %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>補充一下這些通知預設的訊息：</p><ul><li><p>notice：</p><ul><li>預設登入登出提醒資訊</li><li>信件寄出相關</li></ul></li><li><p>alert：</p><ul><li>資料填寫驗證有誤相關</li></ul></li></ul><p>預設都是英文，有需要調整成中文可以參考 i18n 套件的使用<br><a href="https://guides.rubyonrails.org/i18n.html">https://guides.rubyonrails.org/i18n.html</a></p><h2 id="建立-model"><a href="#建立-model" class="headerlink" title="建立 model"></a>建立 model</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate devise MODEL</span><br></pre></td></tr></table></figure><p>透過內建指令產生 model 及 migration，上面標示的 MODEL(通常用 user) 可以用別的但會影響預設的 controller 跟 view 位置及名稱，可以到 db&#x2F;migrate 查看產生的 migration 檔案</p><p><img src="https://i.imgur.com/HUXfnnM.png"></p><p>執行後 rails 會自動產生 migration、model、route 等。<br>Devise 有提供多達 10 個模組，可以取消 migration 內的註解開啟這些資料欄位紀錄：</p><ol><li>Database Authenticatable 加密並儲存密碼於資料庫，當使用者登入時比對驗證身份。驗證機制可以透過 POST 請求或者 HTTP 基本的驗證方式。</li><li>Omniauthable 支援 OmniAuth 第三方認證標準 (<a href="https://github.com/intridea/omniauth">https://github.com/intridea/omniauth</a>)</li><li>Confirmable 寄送 Email 來驗證帳號是否啟用、並且確認會員是否已註冊過</li><li>Recoverable 可以重設密碼與發送密碼更改的通知信件</li><li>Registerable 處理註冊流程，且會員可編輯相關資料、刪除個人帳號</li><li>Rememberable 管理 Token 的產生與清除，使用者的部分資訊會被存在客戶端的 cookie，（達成跳轉頁面時，不必一再登入）</li><li>Trackable 追蹤登入的紀錄（像是次數，時間與 IP）</li><li>Timeoutable 超過一定時間使用者未操作網站，sessions 會過期</li><li>Validatable 提供信箱和密碼的驗證。此功能可以視情況客製化，自行定義驗證方式。</li><li>Lockable 當帳號不斷登入失敗時會鎖住。同時發送 Email 來驗證解鎖。</li></ol><p>確定好要開啟的功能之後，記得 <code>db:migrate</code></p><h2 id="產生預設相關-view"><a href="#產生預設相關-view" class="headerlink" title="產生預設相關 view"></a>產生預設相關 view</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails generate devise:views</span><br></pre></td></tr></table></figure><p>使用這個指令可以建立套件預設的 view，<br>你可以調整需要的頁面連結，註冊、登入、忘記密碼等等，客製自己的版面</p><ul><li>sessions 登入相關</li><li>registrations 註冊相關</li><li>confirmations 帳號認證相關</li><li>passwords 忘記密碼&#x2F;密碼修改</li><li>unlocks 上鎖帳號相關</li><li>mailer 信件寄送內容相關</li><li>shared 共同<ul><li>error_messages 錯誤訊息顯示</li><li>link 所有連結彙整 (登入、登出、第三方登入註冊、忘記密碼…)</li></ul></li></ul><p><img src="https://i.imgur.com/B3ZYJtY.png"></p><p>做到這邊就可以看到登入系統已經有可以使用基本的功能及畫面了<br>根據相關的路徑可以找到對應的畫面<br><img src="https://i.imgur.com/I9tI9nq.png"></p><p>&#x2F;users&#x2F;sign_up 註冊<br><img src="https://i.imgur.com/eSqwfwF.png"></p><p>&#x2F;users&#x2F;sign_in 登入<br><img src="https://i.imgur.com/mJR4qca.png"></p><hr><p>下一篇再來針對 controller 的使用，還有之前使用這個套件進行過的客製化部分做說明~</p><hr><p>參考資料：</p><ol><li><a href="https://github.com/heartcombo/devise#configuring-models">devise - github</a></li><li><a href="https://andyyou.github.io/2015/04/04/devise/">Devise 快速上手</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rails套件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> Devise </tag>
            
            <tag> 套件 </tag>
            
            <tag> 會員系統 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：區塊</title>
      <link href="/2022/08/27/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E5%8D%80%E5%A1%8A/"/>
      <url>/2022/08/27/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E5%8D%80%E5%A1%8A/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>在 Ruby 世界中有著區塊(本篇將稱 block)的特殊語法，跟語言的執行程序上有大大的關聯，今天就來好好跟大家介紹這些部分吧!</p></div><h2 id="區塊-Block"><a href="#區塊-Block" class="headerlink" title="區塊 Block"></a>區塊 Block</h2><p>前面有跟大家說到 ruby 幾乎甚麼都是物件，但唯獨 block 這個東西他不能算是物件，而<br>block 在 ruby 中有兩種：</p><blockquote><ul><li>{} 之內</li><li>do…end 的範圍內</li></ul></blockquote><h3 id="Block-的特性"><a href="#Block-的特性" class="headerlink" title="Block 的特性"></a>Block 的特性</h3><p>總結有以下的特性：</p><blockquote><ul><li>一段不會被主動執行的程式碼</li><li>不是物件</li><li>像寄生蟲一樣需要依附在某些方法或物件，且不是參數<br>Block 會不會執行，要看宿主臉色，<strong>是否有 yield</strong></li></ul></blockquote><p>可以看下面的例子，我們定義一個吃東西的方法，food 是參數，下面的兩種 block 類型其實都不會被執行，既使看起來有被呼叫到，就像我們上面說的特性，不會被主動執行，也不是參數。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eat_something</span>(<span class="params">food</span>)</span><br><span class="line">  <span class="comment"># eat something here</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">eat_something(rice) &#123;</span><br><span class="line">  puts <span class="string">&quot;Block在這&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或是 do ... end 寫法</span></span><br><span class="line">eat_something(<span class="string">&quot;noodle&quot;</span>) <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">&quot;這裡也是Block&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="如何執行-yield-控制權轉讓"><a href="#如何執行-yield-控制權轉讓" class="headerlink" title="如何執行? (yield 控制權轉讓)"></a>如何執行? (yield 控制權轉讓)</h3><p>不知道大家有沒有在馬路上看過這樣的標誌?</p><p><img src="https://i.imgur.com/5xb2r4M.png"></p><p>大家應該知道這樣的號誌出現就是行車要禮讓行人的路口，等行人過去之後才能繼續前進。<br>其實 block 的運作就是像是這樣的情境喔!!<br>當出現 yield 的時候，區塊內的程式碼就會馬上被執行，而這樣的狀況其實是<strong>控制權的轉讓</strong>，當執行完成後再交出控制權回去依序執行剩下的程式碼。</p><p>舉個例子來說：<br>下面個別字串後面括號的順序就是執行的順序喔! 可以看到 yield 表示將控制權交給 block { } 內的程式碼</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drive_car</span></span><br><span class="line">  puts <span class="string">&quot;行駛中!!(1)&quot;</span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  puts <span class="string">&quot;我是好公民要等行人過完才能走喔!!(3)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">drive_car &#123;</span><br><span class="line">  puts <span class="string">&quot;停車!--這裡是block喔--(2)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">puts <span class="string">&quot;可以走啦!!(4)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="傳遞參數給-Block"><a href="#傳遞參數給-Block" class="headerlink" title="傳遞參數給 Block"></a>傳遞參數給 Block</h3><p>Block 不是參數，但可以做為傳遞參數的角色。<br>轉讓的同時，還可以帶上拌手禮傳遞參數，依照傳遞的多寡可以依序轉讓。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">block_pass_one</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">10</span> <span class="comment"># 傳遞10出去</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">block_pass_one <span class="keyword">do</span> |<span class="params">n</span>| <span class="comment"># do..end 之間接到參數並指定給 n</span></span><br><span class="line">  puts n <span class="comment"># 印出 10</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_pass_two</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">10</span>,<span class="number">20</span> <span class="comment"># 傳遞10, 20出去</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">block_pass_two <span class="keyword">do</span> |<span class="params">n, m</span>| <span class="comment"># do..end 之間接到參數並依序指定給 n, m</span></span><br><span class="line">  puts n <span class="comment"># 印出 10</span></span><br><span class="line">  puts m <span class="comment"># 印出 20</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="如果沒有-Block-但卻-yield-的話"><a href="#如果沒有-Block-但卻-yield-的話" class="headerlink" title="如果沒有 Block 但卻 yield 的話?"></a>如果沒有 Block 但卻 yield 的話?</h4><p>會出錯喔!! 控制權轉讓之後沒有 block 可以接的話就會有 localJumpError。<br>def say_hello # 轉讓控制權，往下找到 test two 的方法<br>yield<br>end<br>say_hello # no block given (yield) (LocalJumpError)</p><h3 id="block-回傳值"><a href="#block-回傳值" class="headerlink" title="block 回傳值"></a>block 回傳值</h3><p>Block，不用寫 return，最後一行的執行結果會自動變成回傳值。像是一些方法的使用可以看出來，如下面這些例子</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map 與 select 方法 &#123;&#125; 之間的運算就是最後的回傳。</span></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).map&#123;|<span class="params">x</span>|x*<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).select&#123;|<span class="params">x</span>|x.odd?&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># test two 方法後面接上block，&#123;&#125;內的判斷就成為最後的回傳</span></span><br><span class="line"><span class="comment"># yield後面帶入的參數會影響下方&#123;&#125;內判斷結果，再回到原本方法去判斷是要印出哪個內容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_two</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">yield</span>(<span class="number">2</span>)</span><br><span class="line">    puts <span class="string">&quot;yes, it is 2&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts <span class="string">&quot;no, it is not 2&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">test_two &#123;|<span class="params">n</span>| n == <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="如果使用-return-在-block-中呢"><a href="#如果使用-return-在-block-中呢" class="headerlink" title="如果使用 return 在 block 中呢?"></a>如果使用 return 在 block 中呢?</h4><p>也會出現 localjumperror，因為 Block 不是一個方法，不知道 Return 到哪裡去，所以造成錯誤。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p (<span class="number">1</span>..<span class="number">100</span>).select&#123; |<span class="params">x</span>| <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="do…end-及-大括號-之間差異"><a href="#do…end-及-大括號-之間差異" class="headerlink" title="do…end 及 大括號 {} 之間差異?"></a>do…end 及 大括號 {} 之間差異?</h3><p>一般來說是一樣的，但可能會有優先度的差別，在一些方法的寫法上導致類似先乘除後加減的狀況。</p><ul><li>Block 的內容如果有多行，會建議使用 do .. end 寫法</li><li>如果只有一行，則建議使用大括號寫法</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map &#123; |<span class="params">i</span>| i * <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># =&gt; 得到 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] &#123;&#125; 優先度高</span></span><br><span class="line"></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map <span class="keyword">do</span> |<span class="params">i</span>| i * <span class="number">2</span> <span class="keyword">end</span></span><br><span class="line"><span class="comment"># =&gt; 得到 &lt;Enumerator: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:map&gt; do...end 優先度低，</span></span><br><span class="line"><span class="comment"># 可以還原成 (p [*1..10].map) do |i| i * 2 end，括號內先執行完，所以後面的條件沒有被帶入執行。</span></span><br></pre></td></tr></table></figure><p>以上就是基本對於 block 相關的介紹，後面可以開始進入 ruby 這充滿物件的世界中－物件導向，了解一下關於物件導向的一些概念吧。</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/07-ruby-basic-3">為你自己學 Ruby on rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：方法</title>
      <link href="/2022/08/25/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/25/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><p>這部分的觀念相當重要喔，大家使用 ruby 主要為了可以好好操作 rails 這個開發框架，裡面內部組成，除了前面的資料類型及邏輯判斷等，再來務必要認識的就是這些方法(Method)跟區塊(Block)的使用了。有一定的認識後進入 rails 的世界才能看懂其中的奧妙呀!</p></div><h2 id="方法-Method"><a href="#方法-Method" class="headerlink" title="方法 (Method)"></a>方法 (Method)</h2><h3 id="為什麼要使用"><a href="#為什麼要使用" class="headerlink" title="為什麼要使用?"></a>為什麼要使用?</h3><p>有些時候我們會<strong>重複做一些指令</strong>，如果可以簡單幾行字就能呼叫一連串的指令，然後可以重複利用在不同的地方，就是我們為什麼會要使用方法的原因啦。</p><h3 id="如何定義與使用"><a href="#如何定義與使用" class="headerlink" title="如何定義與使用?"></a>如何定義與使用?</h3><p>如同標題我們要定義就是使用 define 這個英文的簡寫 <code>def</code> 來開頭，後面宣告這個方法的名稱，<strong>名稱很重要</strong>最好可以清楚表達執行內容，接著就是放入的參數及要執行的內容，最後再加上 <code>end</code> 結束，後面會介紹到這段<code>def...end</code>的範圍稱為區塊，大概會長成這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>() <span class="comment"># 方法名為say_hello，後面括號可以不放參數</span></span><br><span class="line">  puts <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello() <span class="comment"># 印出 hello</span></span><br><span class="line">say_hello <span class="comment"># 同上，可以省略括號</span></span><br></pre></td></tr></table></figure><h3 id="參數-parameter-與引數-argument"><a href="#參數-parameter-與引數-argument" class="headerlink" title="參數(parameter)與引數(argument)"></a>參數(parameter)與引數(argument)</h3><p>很多人都會搞混這部分，認為都是叫做參數。其實是：</p><blockquote><ul><li>參數是在定義方法時後面括號內部物件</li><li>引數是在呼叫使用方法時括號內所帶入的物件</li></ul></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello_to</span>(<span class="params">name</span>) <span class="comment"># 放入參數name</span></span><br><span class="line">  puts <span class="string">&quot;hello, <span class="subst">#&#123;name&#125;</span>&quot;</span> <span class="comment"># name 所放的引數會被帶入</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello_to(Sean) <span class="comment"># 帶入Sean作為引數，印出 hello, Sean</span></span><br></pre></td></tr></table></figure><h3 id="使用注意參數與引數的數量"><a href="#使用注意參數與引數的數量" class="headerlink" title="使用注意參數與引數的數量"></a>使用注意參數與引數的數量</h3><p>必須<strong>一個蘿蔔一個坑對入</strong>，如果參數有 3 個，只要引數不等於 3 個都是會出錯的!!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b,c</span>)</span><br><span class="line">  a + b + c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">add (<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 出錯，少一個</span></span><br><span class="line">add (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># 出錯，多一個</span></span><br></pre></td></tr></table></figure><h3 id="參數預設值"><a href="#參數預設值" class="headerlink" title="參數預設值"></a>參數預設值</h3><p>方法的參數可以用 “&#x3D;” 先預設好喔</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello_to</span>(<span class="params">name =<span class="string">&quot;Ken&quot;</span></span>) <span class="comment"># 預設name為&quot;Ken&quot;</span></span><br><span class="line">  puts <span class="string">&quot;hello, <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello_to(Sean) <span class="comment"># 印出 hello, Sean</span></span><br><span class="line">say_hello_to() <span class="comment"># 有預設如果沒引數會自動帶入預設&quot;Ken&quot;作為引數，印出 hello, Ken</span></span><br></pre></td></tr></table></figure><h3 id="回傳"><a href="#回傳" class="headerlink" title="回傳"></a>回傳</h3><p>從前面的例子如果有注意到其實方法的最後一行就是所謂的回傳值，注意特別的是 Ruby 中 return 可以適時的省略，自動回傳最後一行。</p><p>比較需要注意很多人以為用 puts 印出就表示回傳了，<strong>其實 puts 是沒有回傳值的</strong>，沒回傳就會回傳 nil。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># puts沒有回傳</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_num</span>(<span class="params">num</span>)</span><br><span class="line"> puts num * <span class="number">2</span> <span class="comment"># 印出 2 倍的值，但其實是沒有回傳值的</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p double_num(<span class="number">5</span>) <span class="comment"># 會印出什麼？答案是 10 跟 nil 喔!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回傳值</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_num</span>(<span class="params">num</span>)</span><br><span class="line"> <span class="keyword">return</span> num * <span class="number">2</span> <span class="comment"># 回傳 num*2 ，可以省略return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p double_num(<span class="number">5</span>) <span class="comment"># 印出 10</span></span><br></pre></td></tr></table></figure><h3 id="及-究竟在幹嘛"><a href="#及-究竟在幹嘛" class="headerlink" title="? 及 ! 究竟在幹嘛?"></a>? 及 ! 究竟在幹嘛?</h3><ul><li>? 跟 ! 可以是命名的一部份，但只能放在最後面</li><li>問號通常會回傳真假值，而驚嘆號通常表示要注意！</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_adult?</span>(<span class="params">age</span>)</span><br><span class="line">  <span class="keyword">if</span> age &gt;= <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">p list.sort <span class="comment"># 排序但不改變原本陣列，印出[1,2,3,4]</span></span><br><span class="line">p list <span class="comment"># 原本陣列還是印 [1,4,3,2]</span></span><br><span class="line">p list.sort! <span class="comment"># 排序但改變原本陣列 [1,2,3,4]</span></span><br><span class="line">p list <span class="comment"># 原本陣列改成 [1,2,3,4]</span></span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><ol><li><a href="https://railsbook.tw/chapters/07-ruby-basic-3">為你自己學 ruby on rails</a></li><li><a href="https://ruby-doc.org/core-2.4.1/doc/syntax/methods_rdoc.html">Ruby Docs - Method</a></li><li><a href="https://pjchender.dev/ruby-on-rails/ruby-function-method/">[Ruby] 方法／函式（function &#x2F; method）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：迴圈與迭代</title>
      <link href="/2022/08/22/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E8%BF%B4%E5%9C%88%E8%88%87%E8%BF%AD%E4%BB%A3/"/>
      <url>/2022/08/22/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E8%BF%B4%E5%9C%88%E8%88%87%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="迴圈與迭代-Loop-amd-Iteration"><a href="#迴圈與迭代-Loop-amd-Iteration" class="headerlink" title="迴圈與迭代 Loop amd Iteration"></a>迴圈與迭代 Loop amd Iteration</h2><p>這部分通常都是每個程式新手剛開始碰到的一個小難關，常常自己卡在迴圈裡面轉啊轉轉不出來，究竟我們為什麼會需要迴圈呢? 今天就來好好介紹一下這個好東西吧!</p></div><h3 id="為甚麼會需要迴圈"><a href="#為甚麼會需要迴圈" class="headerlink" title="為甚麼會需要迴圈?"></a>為甚麼會需要迴圈?</h3><p>我想答案其實很簡單，因為<strong>重覆</strong>阿，主要因為在程式設計的資料呈現或是取得上，特別是陣列，會不斷透過相同的指令去重覆進行，所以就有了迴圈這樣的方法產生了。比如說要你依序取出特定的資料或是印出一些字串，你應該很懶得自己一樣樣的取出或印出吧，如果一個指令就能自動全部拿到或是幫你重覆執行相同動作的話，何樂而不為呢?</p><h2 id="迴圈種類"><a href="#迴圈種類" class="headerlink" title="迴圈種類"></a>迴圈種類</h2><p>在 Ruby 裡面的迴圈主要有以下五種：</p><ol><li><code>for</code></li><li><code>while</code></li><li><code>loop</code></li><li><code>method</code> (Ruby 特有)</li><li><code>迭代</code> (常用)</li></ol><h3 id="迴圈和迭代-Loop-vs-Iteration"><a href="#迴圈和迭代-Loop-vs-Iteration" class="headerlink" title="迴圈和迭代 Loop vs Iteration"></a>迴圈和迭代 Loop vs Iteration</h3><p>很多時候這兩個類型定義其實很模糊，主要差別是：</p><blockquote><ul><li>迴圈: 執行完特定圈數就沒了</li><li>迭代: 是要針對每個對象去進行(或遍歷)，也是一種迴圈的方式，會執行到每個對象都完成後才會停止。</li></ul></blockquote><h3 id="For-迴圈-for…in"><a href="#For-迴圈-for…in" class="headerlink" title="For 迴圈 (for…in)"></a>For 迴圈 (for…in)</h3><p>for in 迴圈使用的格式通常是 <code>For 單數名 in 複數名</code><br>通常這兩者之間會用同樣的名字的單複數，比較可以明確表達你要取得一堆東西(複數)裡面的個別資料，你要取不相關的名稱也是可以。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line">  puts name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出&quot;Sean&quot;, &quot;Ken&quot;, &quot;John&quot;, &quot;Tom&quot;</span></span><br></pre></td></tr></table></figure><h3 id="While-迴圈"><a href="#While-迴圈" class="headerlink" title="While 迴圈"></a>While 迴圈</h3><p>使用這類的迴圈要小心不要變成無窮迴圈，要設定清楚結束條件，不然形成無權迴圈可是會讓你的程式執行卡住喔! 結束的條件會設定在 while 後面，後面再進行特定動作直到達成結束條件後結束。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span> <span class="comment">#結束條件</span></span><br><span class="line">  puts x</span><br><span class="line">  x += <span class="number">1</span> <span class="comment">#改變條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依序印出 1~9</span></span><br></pre></td></tr></table></figure><h4 id="邪惡分身-Evil-Twins"><a href="#邪惡分身-Evil-Twins" class="headerlink" title="邪惡分身 Evil Twins:"></a>邪惡分身 Evil Twins:</h4><p>這邊一樣又出現了 ruby 的邪惡分身，非母語的比較不直觀，可以依照個人喜好選用。</p><ul><li>until &#x3D; while not</li><li>while &#x3D; until not</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">until</span> x &gt;= <span class="number">10</span> <span class="comment">#結束條件</span></span><br><span class="line">  puts x</span><br><span class="line">  x += <span class="number">1</span> <span class="comment">#改變條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出1~9 (大於等於10就停止)</span></span><br></pre></td></tr></table></figure><h3 id="loop-迴圈"><a href="#loop-迴圈" class="headerlink" title="loop 迴圈"></a>loop 迴圈</h3><p>與 while 類似，但是需要使用 break 去設定結束條件終止迴圈進行，可以選則使用 do..end 或是{ }，這區間都稱作 block，兩者是同樣的作用方式可以互相替換，是 ruby 很重要的觀念喔!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  puts i</span><br><span class="line">  i += <span class="number">1</span> <span class="comment"># 改變條件</span></span><br><span class="line">  <span class="keyword">break</span> <span class="keyword">if</span> i &gt; <span class="number">10</span> <span class="comment"># 終止條件</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出1~9</span></span><br></pre></td></tr></table></figure><h3 id="method-迴圈"><a href="#method-迴圈" class="headerlink" title="method 迴圈"></a>method 迴圈</h3><p>之前有講到在 ruby 中數字也算是物件，所以 number.method 應該可以很直觀的弄懂，”.”後面是接方法吧</p><ul><li><code>.times&#123;&#125;</code></li><li><code>.upto()</code></li><li><code>.downto()</code></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 .times&#123;&#125; 執行特定次數 (大括號可換用 do...end)</span></span><br><span class="line"><span class="number">5</span>.times <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出 5次&quot;hello&quot;</span></span><br><span class="line"><span class="comment">#2 .upto() 由小到大(想像.upto後面用小括號接參數)</span></span><br><span class="line"><span class="number">1</span>.upto(<span class="number">10</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="string">&quot;hello, ruby <span class="subst">#&#123;i&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 .downto() 由大到小</span></span><br><span class="line"><span class="number">10</span>.downto(<span class="number">1</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">  puts <span class="string">&quot;hello, ruby <span class="subst">#&#123;i&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="迭代式迴圈-ruby-常用"><a href="#迭代式迴圈-ruby-常用" class="headerlink" title="迭代式迴圈 (ruby 常用)"></a>迭代式迴圈 (ruby 常用)</h2><p>使用 each 的方法針對特定資料內所有元素進行迭代。</p><ul><li><code>each</code> 對每個元素</li><li><code>each_with_index</code> 可以同時處理每個元素跟索引值</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># each</span></span><br><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">names.each <span class="keyword">do</span> |<span class="params">name</span>|</span><br><span class="line">  puts <span class="string">&quot;<span class="subst">#&#123;x&#125;</span> <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出 0 Sean, 1 Ken, 2 John, 3 Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># each_with_index ，效果同上</span></span><br><span class="line">names = [<span class="string">&quot;Sean&quot;</span>, <span class="string">&quot;Ken&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">names.each_with_index <span class="keyword">do</span> |<span class="params">name, x</span>|</span><br><span class="line">  puts <span class="string">&quot;<span class="subst">#&#123;x&#125;</span> <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 印出 0 Sean, 1 Ken, 2 John, 3 Tom</span></span><br></pre></td></tr></table></figure><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/05-ruby-basic-1#flow-control">為你自己學 Ruby on rails</a></li><li><a href="https://pjchender.dev/ruby-on-rails/ruby-loop-and-iterator/">[Ruby] 迴圈及疊代（Loop and Iterator）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎麼大家都一直在說 REST 和 RESTful?</title>
      <link href="/2022/08/20/Ruby/%E6%80%8E%E9%BA%BC%E5%A4%A7%E5%AE%B6%E9%83%BD%E4%B8%80%E7%9B%B4%E5%9C%A8%E8%AA%AA-REST-%E5%92%8C-RESTful/"/>
      <url>/2022/08/20/Ruby/%E6%80%8E%E9%BA%BC%E5%A4%A7%E5%AE%B6%E9%83%BD%E4%B8%80%E7%9B%B4%E5%9C%A8%E8%AA%AA-REST-%E5%92%8C-RESTful/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h1 id="怎麼大家都一直在說-REST-和-RESTful"><a href="#怎麼大家都一直在說-REST-和-RESTful" class="headerlink" title="怎麼大家都一直在說 REST 和 RESTful?"></a>怎麼大家都一直在說 REST 和 RESTful?</h1><p>關於這兩個名詞的好奇，其實是因為接觸 ruby on rails 的學習歷程中，查詢相關的職缺資訊後，發現許多公司的需求不斷提到這兩個字，因此想要去了解這是在說甚麼，才知道原來 ROR 把這樣的設計風格大大發揚光大呢! 不過都學了 Rails 還不好好把這些名詞弄懂真的太對不起了。</p></div><h2 id="REST"><a href="#REST" class="headerlink" title="REST?"></a>REST?</h2><p>Representational State Transfer，簡稱 REST，直譯為”表徵化狀態轉變”，但一聽到這樣的名詞其實根本搞不懂這到底在說甚麼。</p><div class="note info simple"><p>簡單地說 <strong>REST 是一種軟體架構風格</strong> ，適合應用在複雜的網路服務環境中，而 HTTP 也是符合 REST 的架構的一項實作。<br>目的是針對不同軟體、程式在網際網路中能夠互相傳遞訊息。每一個網頁都可視為一個資源（resource）提供使用者使用，而你可以透過 URL（Uniform Resource Locator），也就是這些資源的地址，對這些資源透過 HTTP 動詞，來讀取這些資源或是修改。</p></div><h3 id="RESTful-Triangle-REST-金三角-概念："><a href="#RESTful-Triangle-REST-金三角-概念：" class="headerlink" title="RESTful-Triangle (REST 金三角) 概念："></a>RESTful-Triangle (REST 金三角) 概念：</h3><p><img src="https://i.imgur.com/S3rGzkC.png"></p><p>EX:以我們平常上網的例子來說明應該比較好了解這些組成之間的關係</p><ul><li>瀏覽器上輸入 url <code>https://oseanchen.github.io/(名詞)</code>，對瀏覽器送出 Request</li><li>瀏覽器告訴網頁伺服器：請給我<code>（GET 動詞）這個網址位置</code>的 <code>HTML 格式文件（表徵）</code></li><li>接著瀏覽器解析並呈現出 HTML (回應 Response)，看到畫面(Render)</li><li>過程中可能讀取網頁中的<code>圖片（表徵）</code>，或者點選連結獲得 <code>XML 文件（XML 表徵）</code>，甚至<code>傳送留言（POST 動詞）</code></li></ul><p>這樣的例子就簡單的說明：</p><div class="note info simple"><p>REST 操作 Web 的基本行為是一種表徵化狀態轉變，主要是<strong>藉由操作 (動詞) 不同的 URL (名詞) 達成不同的資料 (表徵) 呈現方式。</strong></p></div><div class="note modern"><p><strong>*補充解釋 Resource</strong><br>有解釋中提到，名詞內其實包含了資源(Resource)的部分，在原本的全名中被省略，URL 表示三角形中的名詞，會指向資源 (可能是圖片、連結或是一些內容，content type) 的位置，所以我們是透過網址（URL）指向資源並用特定動詞取得資源，每一種資源對應一個特定的 URL。</p><p><strong>*補充解釋 HTTP 動詞</strong><br>GET &#x3D;&gt; 讀取資源<br>POST &#x3D;&gt; 新增資源<br>PUT &#x3D;&gt; 替換資源<br>PATCH &#x3D;&gt; 更換資源部分內容<br>DELETE &#x3D;&gt; 刪除資源</p></div><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful?"></a>RESTful?</h2><p>一開始看到會直覺想到 beautiful, successful 之類的單字都是用名詞 + “ful” 轉變來，所以 RESTful 可算是形容詞，一般來說就是<strong>朝著 REST 理念所設計出來的系統可稱為 RESTful</strong></p><h4 id="路徑設計比較"><a href="#路徑設計比較" class="headerlink" title="路徑設計比較:"></a>路徑設計比較:</h4><p>RESTful 路徑設計主要會是下面的概念，可以一眼從路由結構就能看出要對什麼資源(名詞)、進行什麼操作(動詞)。</p><p>瀏覽全部資料：GET + 資源名稱<br>瀏覽特定資料：GET + 資源名稱 + :id<br>新增一筆資料：POST + 資源名稱<br>修改特定資料：PUT + 資源名稱 + :id<br>刪除特定資料：DELETE + 資源名稱 + :id</p><h4 id="非-REST"><a href="#非-REST" class="headerlink" title="非 REST"></a>非 REST</h4><p>取得所有文章資料 GET &#x2F;getAllArticles<br>取得某筆文章資料 GET &#x2F;getArticle&#x2F;11<br>新增文章資料 POST &#x2F;createArticle<br>更新某筆文章資料 POST &#x2F;updateArticle&#x2F;<br>刪除某筆文章資料 POST &#x2F;deleteArticle&#x2F;</p><h4 id="RESTful-1"><a href="#RESTful-1" class="headerlink" title="RESTful"></a>RESTful</h4><p>取得所有文章資料 &#x2F;GET &#x2F;Articles<br>取得某筆文章資料 &#x2F;GET &#x2F;Articles&#x2F;1<br>新增文章資料 &#x2F;POST &#x2F;Articles<br>更新某筆文章資料 &#x2F;PATCH &#x2F;Articles&#x2F;1<br>刪除某筆文章資料 &#x2F;DELETE &#x2F;Articles&#x2F;1</p><p>看到這裡也很直覺得想到我在實作 rails 的過程其實一直在歷經這樣操作，也是因為這樣風格規範之下可以呈現簡明的網址設計。</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://blog.toright.com/posts/725/representational-state-transfer-%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B%E9%A2%A8%E6%A0%BC%E4%BB%8B%E7%B4%B9-part-i-%E5%BE%9E%E4%BA%86%E8%A7%A3-rest-%E5%88%B0%E8%A8%AD%E8%A8%88-restful%EF%BC%81.html">淺談 REST 軟體架構風格 (Part.I) - 從了解 REST 到設計 RESTful！</a></li><li><a href="https://blog.toright.com/posts/5523/restful-api-%E8%A8%AD%E8%A8%88%E6%BA%96%E5%89%87%E8%88%87%E5%AF%A6%E5%8B%99%E7%B6%93%E9%A9%97.html">RESTful API 設計準則與實務經驗</a></li><li><a href="https://ihower.tw/rails/restful.html">Rails 實戰聖經</a></li><li><a href="https://hackmd.io/@monkenWu/Sk9Q5VoV4/https%3A%2F%2Fhackmd.io%2F%40gen6UjQISdy0QDN62cYPYQ%2FHJh9zOE7V?type=book#%E8%A8%AD%E8%A8%88%E4%B8%80%E7%B5%84RESTful-API">簡單理解 REST 設計風格與 RESTful API</a></li><li><a href="https://tw.alphacamp.co/blog/rest-restful-api?gclid=CjwKCAjwh4ObBhAzEiwAHzZYUwg8T0JAp0iu0g9hc5r2YLgbE6s1BOOczVgce4EdcvFbpuK5zOuFABoC0AgQAvD_BwE">什麼是 REST? 認識 RESTful API 路由語義化設計風格</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 網頁設計概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
            <tag> 程式設計 </tag>
            
            <tag> REST </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掌握Ruby世界就要先懂：邏輯判斷與流程控制</title>
      <link href="/2022/08/18/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E9%82%8F%E8%BC%AF%E5%88%A4%E6%96%B7%E8%88%87%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/08/18/Ruby/%E6%8E%8C%E6%8F%A1Ruby%E4%B8%96%E7%95%8C%E5%B0%B1%E8%A6%81%E5%85%88%E6%87%82%EF%BC%9A%E9%82%8F%E8%BC%AF%E5%88%A4%E6%96%B7%E8%88%87%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="邏輯判斷與流程控制"><a href="#邏輯判斷與流程控制" class="headerlink" title="邏輯判斷與流程控制"></a>邏輯判斷與流程控制</h2><p><img src="https://i.imgur.com/UQvOf8m.png"><br>不知道各位有沒有看過這則笑話，你看完今天的內容應該就可以了解這個笑點在哪裡了!</p><p>這部分是各家程式語言最常使用也是訓練大家邏輯思考的地方了，許多的運算或是流程進行就必須先懂這部分的操作，今天就讓我們來好好認識 Ruby 的寫法吧!</p></div><h3 id="等號的數量跟判斷有甚麼關係"><a href="#等號的數量跟判斷有甚麼關係" class="headerlink" title="等號的數量跟判斷有甚麼關係?"></a>等號的數量跟判斷有甚麼關係?</h3><ul><li>“&#x3D;” 1 個等號是<strong>指定</strong></li><li>“&#x3D;&#x3D;” 2 個表示<strong>比對</strong>，會得到 true or false</li><li>“&gt;&#x3D;” 大於等於</li><li>“&lt;&#x3D;” 小於等於</li><li>“!&#x3D;” 驚嘆號出現就是否定，不等於</li></ul><p>其實 Ruby 的等號很多時候不是等號!!<br><mark><strong>Ruby 裡面只有 nil 跟 false 是假的，其他都是真</strong></mark></p><h3 id="If-條件判斷-如果…不然就"><a href="#If-條件判斷-如果…不然就" class="headerlink" title="If 條件判斷 (如果…不然就)"></a>If 條件判斷 (如果…不然就)</h3><p>if 是我們條件的設定，後面可以透過 elsif 添加額外得條件，或是 else 直接設定前面的條件之外的條件都算</p><ul><li>注意： ruby 比較特別的是 elsif 不用寫”e”(英文應為 else if)。</li><li>注意：if 條件最後面需要加上 end 來表示這個邏輯判斷 block 的結束喔，後續的章節還會特別提到 block，可以先想像成這個區域內，裡面應用到的變數出去後就不能用了喔!</li></ul><h4 id="If"><a href="#If" class="headerlink" title="If"></a>If</h4><p>單一條件，且符合條件才會執行內容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> weather == <span class="string">&quot;sunny&quot;</span></span><br><span class="line">  puts <span class="string">&quot;好天氣喔!&quot;</span> <span class="comment">#判斷等於&#x27;sunny&quot;就印出</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="if-…-else"><a href="#if-…-else" class="headerlink" title="if … else"></a>if … else</h4><p>二分法的方式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> weather == <span class="string">&quot;sunny&quot;</span></span><br><span class="line">  puts <span class="string">&quot;好天氣喔!&quot;</span> <span class="comment">#判斷等於&#x27;sunny&quot;就印出</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;壞天氣啦!&quot;</span> <span class="comment">#其他條件都印這個</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="if…elsif…else-中間的-elsif-可以無限增加，剩餘的條件用-else"><a href="#if…elsif…else-中間的-elsif-可以無限增加，剩餘的條件用-else" class="headerlink" title="if…elsif…else (中間的 elsif 可以無限增加，剩餘的條件用 else)"></a>if…elsif…else (中間的 elsif 可以無限增加，剩餘的條件用 else)</h4><p>超過三種條件以上可以使用這種類型判斷</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">0</span> &amp;&amp; age&lt;=<span class="number">3</span></span><br><span class="line">  puts <span class="string">&quot;嬰兒&quot;</span> <span class="comment"># 年齡&gt;=0 且&lt;=3 就印</span></span><br><span class="line"><span class="keyword">elsif</span> age &gt;= <span class="number">4</span> &amp;&amp; age &lt;= <span class="number">10</span></span><br><span class="line">  puts <span class="string">&quot;兒童&quot;</span> <span class="comment"># 年齡&gt;=4 且&lt;=10 就印</span></span><br><span class="line"><span class="keyword">elsif</span> age &gt;= <span class="number">11</span> &amp;&amp; age&lt;=<span class="number">17</span></span><br><span class="line">  puts <span class="string">&quot;青少年&quot;</span> <span class="comment"># 年齡&gt;=11 且&lt;=17 就印</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;成年&quot;</span> <span class="comment">#上述以外的條件都印這個</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="容易搞混的邪惡分身們-evil-twins"><a href="#容易搞混的邪惡分身們-evil-twins" class="headerlink" title="容易搞混的邪惡分身們 evil twins"></a>容易搞混的邪惡分身們 evil twins</h4><ul><li>unless &#x3D; if not</li><li>If &#x3D; unless not<br>非英文母語的可能會覺得不直觀，所以使用哪種必須考慮程式碼可讀性!!</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> age &gt;=<span class="number">18</span></span><br><span class="line">  puts <span class="string">&quot;未成年&quot;</span> <span class="comment">#如果年齡沒有大於等於18 才印出</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h3><p>有些時候會這樣去撰寫，看似精簡，但可讀性比較差。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;=<span class="number">18</span></span><br><span class="line">  status = <span class="string">&quot;成年&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  status = <span class="string">&quot;未成年&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#等同這樣的三元運算，用?前來表示if的條件，:前面則表示if的執行結果，後面表示else的執行結果</span></span><br><span class="line">status = (age&gt;=<span class="number">18</span>)? <span class="string">&quot;成年&quot;</span><span class="symbol">:<span class="string">&quot;未成年&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="case-when"><a href="#case-when" class="headerlink" title="case when"></a>case when</h3><p>利用這樣可以清楚地列出相關的條件，但其實這些都是 ruby 使用語法糖衣包裝過的 if..else</p><p>Ruby 的 Case when 可以用範圍的魔法喔!!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> age</span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span>..<span class="number">3</span></span><br><span class="line">  puts <span class="string">&quot;嬰兒&quot;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">4</span>..<span class="number">10</span></span><br><span class="line">  puts <span class="string">&quot;兒童&quot;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">11</span>..<span class="number">17</span></span><br><span class="line">  puts <span class="string">&quot;青少年&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;成年&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="常見錯誤，一個等號不是等於的判斷"><a href="#常見錯誤，一個等號不是等於的判斷" class="headerlink" title="常見錯誤，一個等號不是等於的判斷"></a>常見錯誤，一個等號不是等於的判斷</h3><p>很多新手會以為單個 “&#x3D;” 可以進行條件判斷，但這樣其實是代表<strong>指定</strong>。<br>可以看到下面的範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age = <span class="number">100</span></span><br><span class="line">  puts <span class="string">&quot;滿分&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;未滿分&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>原本我們預期可以看到 95 分進去條件判斷應該是要印出未滿分，但最後卻印出滿分。是因為 if 那邊應該使用”&#x3D;&#x3D;”，不然會將 score 指定成 100，然後在 ruby 世界中指定這件事情回傳直就是內容本身，所以判斷後得到 true 就回傳”滿分”了。</p><p>以上就是基本的條件判斷在 Ruby 裡面的用法，要好好弄清楚，不管是在任何程式語言中都是相當重要的一環呢!</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/05-ruby-basic-1#flow-control">為你自己學 Ruby on rails</a></li><li><a href="https://ihower.tw/rails/ruby.html">Rails 實戰聖經</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到Ruby世界不可不認識：範圍</title>
      <link href="/2022/08/17/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E7%AF%84%E5%9C%8D/"/>
      <url>/2022/08/17/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E7%AF%84%E5%9C%8D/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="範圍-Range"><a href="#範圍-Range" class="headerlink" title="範圍 Range"></a>範圍 Range</h2><p>範圍是最先讓我感受到 Ruby 神奇魔力的特殊用法，相比於其他的程式語言，這些範圍的用法真的讓一些運算上省事很多，今天就讓我們來認識一下這個特別的魔法吧!</p></div><h3 id="表示方法-“-”-“…”"><a href="#表示方法-“-”-“…”" class="headerlink" title="表示方法 “..” “…”"></a>表示方法 “..” “…”</h3><p>範圍顧名思義就是表示一段區間的表示法，在 ruby 可以用 “..” 或 “…” 的方式來表示<br>如 1-10 我們可以用 1..10，但記得要依序印出來不可以直接就用 p 直接印出 1..10，這樣可是會只有印出”1..10”，需要先轉成陣列，所以可以搭配 to_a 方法將範圍表示的東西轉成陣列。</p><p>如果不想用 to_a 轉成陣列，還有特別的 * 可以把範圍展開，配合陣列的[ ]放在內部，也有相同的效果</p><p>注意 .. 和 … 表示的範圍不同喔，..表示頭尾都包含，…不包含尾巴<br><strong>小小口訣：多一點少一點，少一點多一點</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 少一點多一點 (包含頭尾)</span></span><br><span class="line">puts (<span class="number">1</span>..<span class="number">10</span>).to_a <span class="comment"># 印出 1 ~ 10</span></span><br><span class="line"><span class="comment"># 多一點少一點 (不含尾)</span></span><br><span class="line">puts (<span class="number">1</span>...<span class="number">10</span>).to_a <span class="comment"># 印出 1 ~ 9</span></span><br><span class="line"><span class="comment"># * 可以展開範圍</span></span><br><span class="line">p *<span class="number">1</span>..<span class="number">10</span> <span class="comment"># 依序印出1~10</span></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>] <span class="comment"># 印出 [1,2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure><h3 id="哪些東西可以使用"><a href="#哪些東西可以使用" class="headerlink" title="哪些東西可以使用?"></a>哪些東西可以使用?</h3><p>數值可以用感覺不稀奇，最令我覺得神奇的是英文字母 ruby 也可以透過範圍來表示呢!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">10</span>) <span class="comment"># 範圍 1 ~ 10</span></span><br><span class="line">(<span class="string">&quot;a&quot;</span>..<span class="string">&quot;z&quot;</span>) <span class="comment"># 範圍 a ~ z</span></span><br><span class="line">(<span class="string">&quot;A&quot;</span>..<span class="string">&quot;Z&quot;</span>) <span class="comment"># 範圍 A ~ Z</span></span><br></pre></td></tr></table></figure><h3 id="搭配陣列的一些方法讓我們更好做事"><a href="#搭配陣列的一些方法讓我們更好做事" class="headerlink" title="搭配陣列的一些方法讓我們更好做事"></a>搭配陣列的一些方法讓我們更好做事</h3><p>還記得之前提過的 map, select, reduce 之類的方法嗎? 這些都可以搭配範圍將程式碼很精簡的表示喔!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map 對範圍內每個數值做x+1處理後回傳陣列</span></span><br><span class="line">p [*<span class="number">1</span>..<span class="number">10</span>].map &#123; |<span class="params">x</span>| x+<span class="number">1</span>&#125; <span class="comment"># [2,3,4,5,6,7,8,9,10,11]</span></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).to_a.map &#123; |<span class="params">x</span>| x+<span class="number">1</span>&#125; <span class="comment"># 效果同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字母也可以用大小來判斷呢，想像每個英文字母依照順序是有大小之分，越後面數值越大。 select可以挑選符合條件的元素形成陣列回傳</span></span><br><span class="line">p (<span class="string">&quot;a&quot;</span>..<span class="string">&quot;g&quot;</span>).to_a.select &#123; |<span class="params">chars</span>| chars &lt; <span class="string">&quot;c&quot;</span>&#125; <span class="comment"># 取出小於&quot;c&quot; 的就會得到 [&quot;a&quot;,&quot;b&quot;]</span></span><br></pre></td></tr></table></figure><p>甚至可以用來取出陣列中的值喔，注意數字所代表的是陣列的索引喔。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pokemon = [<span class="string">&quot;皮卡丘&quot;</span>,<span class="string">&quot;傑尼龜&quot;</span>,<span class="string">&quot;妙蛙種子&quot;</span>,<span class="string">&quot;小火龍&quot;</span>]</span><br><span class="line">p pokemon[<span class="number">1</span>..<span class="number">2</span>] <span class="comment"># [&quot;傑尼龜&quot;,&quot;妙蛙種子&quot;] =&gt;取出索引1~2的元素</span></span><br></pre></td></tr></table></figure><h3 id="小小挑戰：請計算從-1-加到-100-的總和"><a href="#小小挑戰：請計算從-1-加到-100-的總和" class="headerlink" title="小小挑戰：請計算從 1 加到 100 的總和"></a>小小挑戰：請計算從 1 加到 100 的總和</h3><p>如果大家記得之前我們提過可以使用 reduce 的方法處理陣列的加總，你應該知道這樣的問題要怎麼回答吧。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = (<span class="number">1</span>..<span class="number">100</span>).to_a.reduce&#123;|<span class="params">sum, x</span>| sum + x&#125;</span><br><span class="line"><span class="comment"># sum = [*1..100].reduce(:+) # 這種特殊的方法更簡短，冒號後面可以套用其他運算符號(+ - x /)</span></span><br><span class="line">puts sum <span class="comment"># 5050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#黑魔法來了，可以用sum方法，可以直接針對範圍內的數值加總</span></span><br><span class="line">puts (<span class="number">1</span>..<span class="number">100</span>).sum</span><br></pre></td></tr></table></figure><p>了解了範圍用法之後，我們可以實際應用在很多陣列的地方喔，好好的善用 Ruby 賜與我們的神奇魔法吧!!</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/06-ruby-basic-2#range_class">為你自己學 Ruby on rails</a></li><li><a href="https://ruby-doc.org/core-3.1.2/Range.html">Ruby Docs - Range</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到Ruby世界不可不認識：雜湊</title>
      <link href="/2022/08/14/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E9%9B%9C%E6%B9%8A/"/>
      <url>/2022/08/14/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E9%9B%9C%E6%B9%8A/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="雜湊-Hash"><a href="#雜湊-Hash" class="headerlink" title="雜湊 Hash"></a>雜湊 Hash</h2><p>這是個類似陣列的容器型資料型態，裡面的資料是一組一組相互對應，我們會稱為 <strong>key</strong> 跟 <strong>value</strong>，與陣列不同的是，這裡面沒有排序，不能透過[索引]方式取出內容，且用大括號包起來。</p></div><p>Hash 有以下的幾個特色：</p><ul><li>keys 和 values 可以由任意 object 組成</li><li>keys 的值不可重複</li><li>values，是對應 keys 的物件，值可以重複</li></ul><p>最容易想像的資料型態就像學生的成績紀錄，如同下面的表示，name 和 score 都是這個 hash 的 key，可以想像成一個而主要的標題，分別對應的內容就是’Sean’, 100 這兩個值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student_score = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Sean&#x27;</span>, <span class="symbol">score:</span> <span class="number">100</span> &#125;</span><br><span class="line"></span><br><span class="line">list = &#123;<span class="symbol">:name</span> =&gt; <span class="string">&quot;Sean&quot;</span>, <span class="symbol">:name</span> =&gt; <span class="string">&quot;Tom&quot;</span>&#125; <span class="comment">#出錯，不能重複指定key</span></span><br></pre></td></tr></table></figure><h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><ul><li>舊式 (符號箭頭)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123; <span class="symbol">:name</span> =&gt; <span class="string">&#x27;Sean&#x27;</span>, <span class="symbol">:age</span> =&gt; <span class="number">20</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>新式 (Ruby 1.9 之後的新式寫法)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Sean&#x27;</span>, <span class="symbol">age:</span> <span class="number">20</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="存取資料內容"><a href="#存取資料內容" class="headerlink" title="存取資料內容"></a>存取資料內容</h3><h4 id="拿取資料"><a href="#拿取資料" class="headerlink" title="拿取資料"></a>拿取資料</h4><ul><li>寫過別的程式語言可能會直覺想用字串(“”)的方式拿取，但是沒辦法，<strong>記得要用:符號來拿喔!!</strong></li><li>不過 rails 環境中有特別擴充可以用字串方式去拿</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Sean&#x27;</span>, <span class="symbol">age:</span> <span class="number">20</span> &#125;</span><br><span class="line"><span class="comment"># 取得name的value</span></span><br><span class="line">puts profile[<span class="string">&quot;name&quot;</span>] <span class="comment"># nil</span></span><br><span class="line">puts profile[<span class="symbol">:name</span>] <span class="comment"># Sean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得age的value</span></span><br><span class="line">puts profile[<span class="string">&quot;age&quot;</span>] <span class="comment"># nil</span></span><br><span class="line">puts profile[<span class="symbol">:age</span>] <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拿取全部的keys or values</span></span><br><span class="line">profile.keys <span class="comment">#拿取所有key =&gt; name,age</span></span><br><span class="line">profile.values <span class="comment">#拿取所有value =&gt; &quot;Sean&quot;,20</span></span><br></pre></td></tr></table></figure><h4 id="存入資料"><a href="#存入資料" class="headerlink" title="存入資料"></a>存入資料</h4><ul><li>用符號的方式並且指定 value 給 hash</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">character = &#123; <span class="symbol">name:</span> <span class="string">&#x27;warrier&#x27;</span>, <span class="symbol">age:</span> <span class="number">20</span> &#125;</span><br><span class="line">character[<span class="symbol">:power</span>] = <span class="number">100</span></span><br><span class="line">p character <span class="comment">#&#123;:name=&gt;&quot;warrier&quot;, :age=&gt;20, :power=&gt;100&#125;</span></span><br></pre></td></tr></table></figure><h4 id="長度"><a href="#長度" class="headerlink" title="長度"></a>長度</h4><p>可以用 length 或 size 找到內部有幾組 key 和 value</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">profile = &#123;<span class="symbol">name:</span> <span class="string">&quot;Sean&quot;</span>, <span class="symbol">age:</span> <span class="number">25</span>, <span class="symbol">power:</span><span class="number">100</span>, <span class="symbol">ability:</span> <span class="string">&quot;Ruby&quot;</span>&#125;</span><br><span class="line">p profile.length <span class="comment"># 4</span></span><br><span class="line">p h1.size <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/06-ruby-basic-2#hash_class">為你自己學 Ruby on rails</a></li><li><a href="https://ruby-doc.org/core-3.1.2/Hash.html">Ruby Docs - Hash</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到Ruby世界不可不認識：符號</title>
      <link href="/2022/08/14/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E7%AC%A6%E8%99%9F/"/>
      <url>/2022/08/14/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E7%AC%A6%E8%99%9F/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="符號-Symbol"><a href="#符號-Symbol" class="headerlink" title="符號 Symbol"></a>符號 Symbol</h2><p>符號也是一個 Ruby 特有的資料型態，很多剛從別的程式語言進來的朋友，剛開始比較難習慣這樣的東西。連原本寫 ruby 的可能都不見得解釋得清楚，但我會努力整理清楚我對這個資料的認知給大家。</p></div><h2 id="命名及定義"><a href="#命名及定義" class="headerlink" title="命名及定義"></a>命名及定義</h2><ul><li>符號 &#x3D; 有名字的物件</li><li>命名規則類似變數，是以用英文字母或數字的組合</li><li>例如<code>:name</code>, <code>:class</code>, <code>:名字</code>, <code>:類別</code>，要在中間加上空白也沒問題。但大多還是以英文字母的組合為主。</li></ul><blockquote><p><strong>常跟字串搞混：</strong></p><ul><li>字串可以被改變，符號不行</li><li>兩者都是一種物件(值)，都可以被變數指向</li></ul></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:name</span> = <span class="string">&quot;Sean&quot;</span> <span class="comment"># 出錯</span></span><br><span class="line"><span class="string">&quot;name&quot;</span> = <span class="string">&quot;Jack&quot;</span> <span class="comment"># 出錯</span></span><br><span class="line">name1 = <span class="number">123</span> <span class="comment"># 變數指向數字</span></span><br><span class="line">name2 = <span class="string">&quot;Jeff&quot;</span> <span class="comment"># 變數指向字串</span></span><br><span class="line">name3 = <span class="symbol">:Steve</span> <span class="comment"># 變數指向符號</span></span><br></pre></td></tr></table></figure><h2 id="實際使用"><a href="#實際使用" class="headerlink" title="實際使用"></a>實際使用</h2><p>可能你會問，為什麼需要這樣的類型，那不是就用字串就好，但實際上這兩種類型效能有差別，<strong>符號執行的效能上比較好一些，我們會在 rails 開發中大量使用。</strong></p><p>效能的比較可以透過查詢他的記憶體位置(.object_id)來得知，符號都是存在一樣的記憶體位置，第一次已經找到，第二次要用就直接從記憶體拿，而字串卻是每次呼叫都是不同的，所以符號會比較節省。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;hello&quot;</span>.object_id <span class="comment"># 印 720</span></span><br><span class="line">puts <span class="string">&quot;hello&quot;</span>.object_id <span class="comment"># 印 740</span></span><br><span class="line">puts <span class="string">&quot;hello&quot;</span>.object_id <span class="comment"># 印 760</span></span><br><span class="line"></span><br><span class="line">puts <span class="symbol">:hello</span>.object_id <span class="comment"># 印 1920348</span></span><br><span class="line">puts <span class="symbol">:hello</span>.object_id <span class="comment"># 印 1920348</span></span><br><span class="line">puts <span class="symbol">:hello</span>.object_id <span class="comment"># 印 1920348</span></span><br></pre></td></tr></table></figure><h3 id="符號跟字串的轉換"><a href="#符號跟字串的轉換" class="headerlink" title="符號跟字串的轉換"></a>符號跟字串的轉換</h3><ul><li>符號轉字串<ul><li>to_sym</li><li>intern</li><li>%s</li></ul></li><li>字串轉符號<ul><li>to_s</li></ul></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  to_sym 可把字串轉成 symbol</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="string">&quot;Sean&quot;</span>.to_sym</span><br><span class="line">=&gt; <span class="symbol">:Sean</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和to_sym 是一樣的效果</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="string">&quot;Jack&quot;</span>.intern</span><br><span class="line">=&gt; <span class="symbol">:Jack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用 %s 來做轉換</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> %s(name)</span><br><span class="line">=&gt; <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 to_s 方法可以把 symbol 轉成字串</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="symbol">:name</span>.to_s</span><br><span class="line">=&gt; <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure><h3 id="該選符號還是字串"><a href="#該選符號還是字串" class="headerlink" title="該選符號還是字串?"></a>該選符號還是字串?</h3><p>像這樣的問題，其實上面已經整理出答案瞜!</p><blockquote><ul><li>不需要改變的 &#x3D;&gt; 符號 (ex: hash 的 key)</li><li>要改變的 &#x3D;&gt; 字串 (ex: 印出一些名稱)</li></ul></blockquote><p>但也會視情況調整，像是符號就沒辦法使用許多好用的方法，字串就可以。</p><p>最普遍看到的符號就是在雜湊 (Hash) 的 key ，因為符號是不會被改變，且查找比較的速度快，會大量用在 hash 中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># :name, :age都是Hash中的key</span></span><br><span class="line">info = &#123;<span class="symbol">:name=&gt;<span class="string">&quot;Sean&quot;</span></span>, <span class="symbol">:age=&gt;</span><span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><p>以上就是我目前整理對於符號相關的重點，下一篇節我們就會討論 Hash 是甚麼喔，請大家好好期待一下!</p><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/06-ruby-basic-2#hash_class">為你自己學 Ruby on rails</a></li><li><a href="https://ruby-doc.org/core-3.1.2/Symbol.html">Ruby Docs - Symbol</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到Ruby世界不可不認識：陣列</title>
      <link href="/2022/08/13/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E9%99%A3%E5%88%97/"/>
      <url>/2022/08/13/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E9%99%A3%E5%88%97/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="陣列-Array"><a href="#陣列-Array" class="headerlink" title="陣列 Array"></a>陣列 Array</h2><p>陣列是每個程式語言很常碰到的資料型態，你可以想像前面講過的字串、數字通通可以塞進一個容器裡面，必且依照順序的排好，所以陣列最特別的是，<strong>有順序且是一堆資料的集合</strong>，在程式的世界裡常用這樣的方式來儲存資料，因此衍伸出許多特別的方法來處理這類型的資料，讓我們可以輕鬆拿到其中想要的內容。</p></div><h3 id="建立陣列"><a href="#建立陣列" class="headerlink" title="建立陣列"></a>建立陣列</h3><p>可以透過直接指定的方式，或是藉由 ruby 特殊的%w 方式建立，但要注意這種方式所產生的內容都是字串。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;bird&quot;</span>,<span class="string">&quot;哈樓&quot;</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list = <span class="string">%w(apple bird 哈樓 1 2)</span> <span class="comment"># [&quot;apple&quot;,&quot;bird&quot;,&quot;哈樓&quot;, &quot;1&quot;, &quot;2&quot;] =&gt; 用這種方式會產生的 &quot;1&quot;,&quot;2&quot; 是字串</span></span><br></pre></td></tr></table></figure><h3 id="拿出陣列內的元素-x2F-長度"><a href="#拿出陣列內的元素-x2F-長度" class="headerlink" title="拿出陣列內的元素&#x2F;長度"></a>拿出陣列內的元素&#x2F;長度</h3><p>要拿到內部的元素，我們可以透過 [索引] 的方式來取得，其中索引依照順序是從 0 開始算，<br>像是下面的例子可以看到 [0] 是代表取出第 1 個，而 [1] 則是第 2 個，以此類推，比較特別的是負數是表示從最後面開始算，所以 [-1] 表示最後 1 個。</p><p>我們可以透過 array.length 的方式知道其中內部含有幾個元素。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pokemon = [<span class="string">&quot;皮卡丘&quot;</span>,<span class="string">&quot;傑尼龜&quot;</span>,<span class="string">&quot;妙蛙種子&quot;</span>,<span class="string">&quot;小火龍&quot;</span>]</span><br><span class="line">puts pokemon[<span class="number">0</span>] <span class="comment"># 印出 皮卡丘</span></span><br><span class="line">puts pokemon[<span class="number">1</span>] <span class="comment"># 印出 傑尼龜</span></span><br><span class="line">puts pokemon[-<span class="number">1</span>] <span class="comment"># 印出 小火龍</span></span><br><span class="line">puts pokemon[-<span class="number">2</span>] <span class="comment"># 印出 妙蛙種子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用first和last取出頭或尾，</span></span><br><span class="line">puts pokemon.first <span class="comment"># 印出 皮卡丘</span></span><br><span class="line">puts pokemon.last <span class="comment"># 印出 小火龍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># length表示陣列的長度</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 4</span></span><br><span class="line">pokemon &lt;&lt; <span class="string">&#x27;小智&#x27;</span> <span class="comment"># 在最後⾯加入</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 5</span></span><br><span class="line">pokemon.push(<span class="string">&#x27;小霞&#x27;</span>) <span class="comment"># 最後面加入</span></span><br><span class="line">puts pokemon.length <span class="comment"># 印出 6</span></span><br><span class="line">puts pokemon <span class="comment"># 經過上面處理印出 皮卡丘, 傑尼龜, 妙蛙種子, 小火龍, 小智, 小霞</span></span><br></pre></td></tr></table></figure><h3 id="好用方法"><a href="#好用方法" class="headerlink" title="好用方法"></a>好用方法</h3><p>和許多程式語言一樣，ruby 在處理陣列的資料類型中也可以透過許多方便的方法來進行處理。</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><ul><li>可以對陣列裡的每個元素進行操作，並收集成一個新的陣列。</li><li>|x|表示內部的每個元素，所以這個 x 可以自己改變名字，後面可以寫下對每個元素進行的操作或運算處理。</li></ul><p>同意詞：collect</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">p a.map &#123; |<span class="params">x</span>| x*<span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># 印出 [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><ul><li>從陣列裡挑選符合條件的元素，並收集成一個新的陣列。</li><li>|x|表示內部的每個元素，所以這個 x 可以自己改變名字，後面可以寫下選取的條件。<br>同意詞：filter<br>反意詞：reject</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">p a.select &#123; |<span class="params">x</span>| x &lt; <span class="number">5</span> &#125;</span><br><span class="line"><span class="comment"># 印出 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><ul><li>對陣列內的每個元素進行運算，並將所有的運算結果歸納成一個單一結果。</li><li>括號內的第一個參數表示累加值(範例使用 sum)，預設沒特別指定的話就是 0，第 2 個參數表示當前的元素(範例使用 n)，當前元素會依續代入陣列內數值並依照運算指示，所以下面例子中 sum 會與陣列內每個數字 n 相加，最後回傳就變成將陣列內所有數字加總的數值。<br>同意詞：inject</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">p a.reduce &#123; |<span class="params">sum, n</span>| sum + n &#125;</span><br><span class="line"><span class="comment"># 印出 55</span></span><br></pre></td></tr></table></figure><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/06-ruby-basic-2">為你自己學 Ruby on rails</a></li><li><a href="https://ruby-doc.org/core-3.1.2/Array.html">Ruby Docs - Array</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到Ruby世界不可不認識：變數、數字、字串</title>
      <link href="/2022/08/12/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E8%AE%8A%E6%95%B8%E3%80%81%E6%95%B8%E5%AD%97%E3%80%81%E5%AD%97%E4%B8%B2/"/>
      <url>/2022/08/12/Ruby/%E5%88%B0Ruby%E4%B8%96%E7%95%8C%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AA%8D%E8%AD%98%EF%BC%9A%E8%AE%8A%E6%95%B8%E3%80%81%E6%95%B8%E5%AD%97%E3%80%81%E5%AD%97%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="變數、數字、字串"><a href="#變數、數字、字串" class="headerlink" title="變數、數字、字串"></a>變數、數字、字串</h2><p>程式語言的世界由許多種不同類型的資料型態構成，讓我們可以在進行撰寫時針對不同的情況做選擇，今天讓我們來認識基本的幾種類型吧!</p></div><h3 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數 Variable"></a>變數 Variable</h3><h4 id="變數指定與使用"><a href="#變數指定與使用" class="headerlink" title="變數指定與使用"></a>變數指定與使用</h4><p>變數可以想像成一個標籤，可以貼在各種類型的資料上面，如數字、字串、陣列等，而變數本身沒有型態，被貼上後就成了指定東西的型態。</p><p>通常在程式語言中 “&#x3D;” 並不是大家想的等於，而是<mark>指定</mark>的意思，被指定過的變數還是可以再指定成別的資料。</p><p>在 Ruby 中變數有以下的特性：</p><blockquote><ul><li>使用不須宣告或指定型態，可以直接拿來使用</li><li>可以重複被指定</li><li>命名使用英文字母、數字或底線的組合、或是非英文字母也可以</li><li>常數</li></ul></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 變數指定</span></span><br><span class="line">name = <span class="string">&quot;Sean&quot;</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定多個變數</span></span><br><span class="line">a,b,c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">puts name <span class="comment"># 印出 Sean</span></span><br><span class="line">puts s <span class="comment"># 印出 1</span></span><br><span class="line">puts a,c <span class="comment"># 印出 1, 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常數定義"><a href="#常數定義" class="headerlink" title="常數定義"></a>常數定義</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Food = “rice”</span><br><span class="line">Drink= “coke”</span><br></pre></td></tr></table></figure><p>在 Ruby 比較特別的是常數可被修改，會出現警告訊息，但就只是警告而已，不是錯誤訊息，程式仍可正常執行，以大寫開頭命名。</p><div class="note info no-icon modern"><h4 id="補充：常數跟變數有甚麼不同"><a href="#補充：常數跟變數有甚麼不同" class="headerlink" title="補充：常數跟變數有甚麼不同?"></a>補充：常數跟變數有甚麼不同?</h4><ul><li>值都可以被修改，變數命名沒有限制，常數開頭用大寫字母命名。</li><li>避免使用關鍵字與保留字命名(Keyword &amp; reserved word) ex: if、else、end、then、class、and、begin、do、or……</li></ul></div><h3 id="字串-String"><a href="#字串-String" class="headerlink" title="字串 String"></a>字串 String</h3><p>通常以引號包住，可使用單引號或雙引號，可以包任何字元、數字，都可以成為字串。</p><ul><li>用單引號或雙引號包住<ul><li>‘string’ 單引號 (注意用這個不能配合變數帶入#{variable}，或是內部有其他單引號出現會失效)</li><li>“string” 雙引號</li></ul></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="string">&quot;hello world&quot;</span></span><br><span class="line">p <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>%Q &amp; %q<ul><li>%Q 等同雙引號</li><li>%q 等同單引號</li></ul></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p %Q (hello world) <span class="comment"># 印出 &quot;hello world&quot;</span></span><br><span class="line">p %q (hello world) <span class="comment"># 印出 &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>字串安插（String Interpolation），將字串中帶入變數，非常好用。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Sean&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old&quot;</span> <span class="comment"># I&#x27;m Sean, and I am 18 years old</span></span><br><span class="line">puts <span class="string">&#x27;I&#x27;</span>m <span class="comment">#&#123;name&#125;, and I am #&#123;age&#125; years old&#x27; # 單引號中間又有單引號會失效</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">%Q(I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old)</span> <span class="comment"># I&#x27;m Sean, and I am 18 years old</span></span><br><span class="line">puts <span class="string">%q(I&#x27;m <span class="subst">#&#123;name&#125;</span>, and I am <span class="subst">#&#123;age&#125;</span> years old)</span> <span class="comment"># 同單引號會失效</span></span><br></pre></td></tr></table></figure><ul><li>字串可以看成是許多字元的組合，在 Ruby 的字串可已透過索引方式找到其中的字元 (字排序的索引從 0 開始算)。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">say_hi = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">puts say_hi[<span class="number">0</span>] <span class="comment"># =&gt; 印出 h</span></span><br><span class="line">puts say_hi[<span class="number">5</span>] <span class="comment"># =&gt; 印出 空白 (注意空格也是字元)</span></span><br><span class="line"></span><br><span class="line">say_hi[<span class="number">0</span>..<span class="number">5</span>] = <span class="string">&quot;Hi!&quot;</span> <span class="comment">#(把第0位到第5位字元重新指定，中間的..是範圍的用法)</span></span><br><span class="line">puts say_hi    <span class="comment"># =&gt; Hi! World</span></span><br></pre></td></tr></table></figure><h3 id="數字-Number"><a href="#數字-Number" class="headerlink" title="數字 Number"></a>數字 Number</h3><p>任何數字組成包含整數(Integer)、小數(Float)都可以算是一種類別，Ruby 裡，整數數值其實就只是 Integer 這個類別的一個實體（instance）而已，小數也是以此類推，後續物件導向部分會再補充。</p><h4 id="運算使用"><a href="#運算使用" class="headerlink" title="運算使用"></a>運算使用</h4><ul><li>使用加減乘除 + - * &#x2F;</li><li>% 取餘數</li><li>使用這些運算符號其實也是在使用方法</li><li>運算碰到有小數點要特別注意，有用到小數點結果就會有小數點</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="number">1</span>+<span class="number">2</span>*(<span class="number">5</span>-<span class="number">3</span>) <span class="comment"># 先處理括號內，由左至右先乘除後加減 = 5</span></span><br><span class="line">puts <span class="number">10</span>/<span class="number">3</span>   <span class="comment">#整數除整數等於整數 = 3</span></span><br><span class="line">puts <span class="number">10.0</span>/<span class="number">3</span> <span class="comment">#小數除以整數等於小數 = 3.33333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 實際上的運算符號的方法運作</span></span><br><span class="line">puts <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">puts <span class="number">1</span>.+(<span class="number">1</span>) <span class="comment"># 結果同上，其實.+是一個方法後面是參數帶入，其他四則運算也相同</span></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>Ruby 有許多特別的數字方法可以直接使用，與其他程式語言不同，因為數字在 ruby 中也是一種物件，有特別設計給數字物件的方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="number">5.4</span>.round <span class="comment"># 轉成整數，四捨五入 =&gt; 5</span></span><br><span class="line">puts <span class="number">3.65</span>.floor <span class="comment"># 轉成整數，無條件捨去 =&gt; 3</span></span><br><span class="line">puts <span class="number">3.14</span>.ceil  <span class="comment"># 轉成整數，無條件進位 =&gt; 4</span></span><br><span class="line">puts <span class="number">3.14</span>.to_i  <span class="comment"># 轉成整數，無條件捨去 =&gt; 3</span></span><br></pre></td></tr></table></figure><p>判斷資料類別可以用.class</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Sean&quot;</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p name.<span class="keyword">class</span> <span class="comment"># String 表示字串類型</span></span><br><span class="line">p a.<span class="keyword">class</span> <span class="comment"># Integer 表示數字類型中的整數</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果再往上找 class 會找到?</span></span><br><span class="line">p Integer.<span class="keyword">class</span> <span class="comment"># Class</span></span><br><span class="line">p String.<span class="keyword">class</span> <span class="comment"># Class</span></span><br></pre></td></tr></table></figure><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/06-ruby-basic-2">為你自己學 Ruby on rails</a></li><li><a href="https://ruby-doc.org/core-3.1.2/String.html">Ruby Docs - String</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>進入Ruby世界記得說 “hello world”</title>
      <link href="/2022/08/12/Ruby/%E9%80%B2%E5%85%A5Ruby%E4%B8%96%E7%95%8C%E8%A8%98%E5%BE%97%E8%AA%AA%20%E2%80%9Chello-world%E2%80%9D/"/>
      <url>/2022/08/12/Ruby/%E9%80%B2%E5%85%A5Ruby%E4%B8%96%E7%95%8C%E8%A8%98%E5%BE%97%E8%AA%AA%20%E2%80%9Chello-world%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<div class="note simple"><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>剛開始學一個程式語言通常都會要你先想辦法印出 “hello world”，主要是能夠把目前程式執行的狀態或是結果呈現出來，確認我們的程式碼以及環境能夠正常執行。</p></div><p>至於實際為什麼是印出 hello world 這兩個字可以參考 <a href="https://ottaster.com/hello-world/">Hello World 程式是什麼意思？這 1 篇講解由來與原因</a></p><hr><p>初學者可以使用的 Ruby 編輯器 <a href="https://replit.com/">Replit</a></p><h2 id="印出字串"><a href="#印出字串" class="headerlink" title="印出字串"></a>印出字串</h2><p>主要有三種方式，比較常見的為第 2-3 種</p><ul><li>print ：印出字，不含換行 (視覺效果差，較少用，<del>加上是其他程式語言使用的，不夠 Ruby</del>)</li><li>puts ： 印出字，含換行</li><li>p ： 印出字及引號，含換行，可以藉此來判斷目前印的完整狀態 (是否有逗號、括號、引號等等)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 印出 Hello, World</span></span><br><span class="line">print <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="comment"># 印出 Hello, World 字樣，並在結尾加上換⾏</span></span><br><span class="line">puts <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="comment"># 印出 &quot;Hello, World&quot; 字樣（含雙引號），並在結尾加上換⾏</span></span><br><span class="line">p <span class="string">&quot;Hello, World&quot;</span></span><br></pre></td></tr></table></figure><h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><ul><li>通常會將不需要被運行的註解，也可以用來補充說明程式碼。</li><li>註解的部分是不會被運行，在 Ruby 裡面會用到的註解方式主要使用 # 字號。</li><li>也可以用 &#x3D;begin ….. &#x3D;end 把多行進行註解。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># puts &quot;hello, world&quot;</span></span><br><span class="line">  puts <span class="string">&quot;hello, world&quot;</span> <span class="comment"># 印出 &quot;hello, world&quot;</span></span><br><span class="line"><span class="comment"># 這是單⾏註解</span></span><br><span class="line">  我沒被註解到</span><br><span class="line"></span><br><span class="line"><span class="comment">=begin</span></span><br><span class="line"><span class="comment">puts &quot;hello, world&quot;</span></span><br><span class="line"><span class="comment">這是多⾏註解</span></span><br><span class="line"><span class="comment">puts &quot;hello&quot;</span></span><br><span class="line"><span class="comment">這是多⾏註解</span></span><br><span class="line"><span class="comment">=end</span></span><br><span class="line">puts <span class="string">&quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="撰寫的風格"><a href="#撰寫的風格" class="headerlink" title="撰寫的風格"></a>撰寫的風格</h2><ul><li>縮排：空 2 格縮排，其他程式語言習慣可能是 4 格。</li><li>命名方式：蛇式 snake_case ，會用底線隔開個別單字，像是把變數或是一些方法命名為 new_number, say_hello_to_you 等等。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello_to_you</span></span><br><span class="line">puts <span class="string">&quot;hi, 你好啊!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p><strong>參考資料:</strong></p><ol><li><a href="https://railsbook.tw/chapters/05-ruby-basic-1">為你自己學 Ruby on rails</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ruby基礎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
